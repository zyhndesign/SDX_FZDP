/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cidic.sdx.remote;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-16")
public class SDXDataService {

  public interface Iface {

    public HPListModel getDataByTag(String tagName, int iDisplayLength, int iDisplayStart, String sEcho) throws org.apache.thrift.TException;

    public List<CategoryModel> getCategoryDataById(int id) throws org.apache.thrift.TException;

    public HPModel getHpDataByHpNum(String hp_num) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDataByTag(String tagName, int iDisplayLength, int iDisplayStart, String sEcho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCategoryDataById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHpDataByHpNum(String hp_num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public HPListModel getDataByTag(String tagName, int iDisplayLength, int iDisplayStart, String sEcho) throws org.apache.thrift.TException
    {
      send_getDataByTag(tagName, iDisplayLength, iDisplayStart, sEcho);
      return recv_getDataByTag();
    }

    public void send_getDataByTag(String tagName, int iDisplayLength, int iDisplayStart, String sEcho) throws org.apache.thrift.TException
    {
      getDataByTag_args args = new getDataByTag_args();
      args.setTagName(tagName);
      args.setIDisplayLength(iDisplayLength);
      args.setIDisplayStart(iDisplayStart);
      args.setSEcho(sEcho);
      sendBase("getDataByTag", args);
    }

    public HPListModel recv_getDataByTag() throws org.apache.thrift.TException
    {
      getDataByTag_result result = new getDataByTag_result();
      receiveBase(result, "getDataByTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataByTag failed: unknown result");
    }

    public List<CategoryModel> getCategoryDataById(int id) throws org.apache.thrift.TException
    {
      send_getCategoryDataById(id);
      return recv_getCategoryDataById();
    }

    public void send_getCategoryDataById(int id) throws org.apache.thrift.TException
    {
      getCategoryDataById_args args = new getCategoryDataById_args();
      args.setId(id);
      sendBase("getCategoryDataById", args);
    }

    public List<CategoryModel> recv_getCategoryDataById() throws org.apache.thrift.TException
    {
      getCategoryDataById_result result = new getCategoryDataById_result();
      receiveBase(result, "getCategoryDataById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategoryDataById failed: unknown result");
    }

    public HPModel getHpDataByHpNum(String hp_num) throws org.apache.thrift.TException
    {
      send_getHpDataByHpNum(hp_num);
      return recv_getHpDataByHpNum();
    }

    public void send_getHpDataByHpNum(String hp_num) throws org.apache.thrift.TException
    {
      getHpDataByHpNum_args args = new getHpDataByHpNum_args();
      args.setHp_num(hp_num);
      sendBase("getHpDataByHpNum", args);
    }

    public HPModel recv_getHpDataByHpNum() throws org.apache.thrift.TException
    {
      getHpDataByHpNum_result result = new getHpDataByHpNum_result();
      receiveBase(result, "getHpDataByHpNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHpDataByHpNum failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDataByTag(String tagName, int iDisplayLength, int iDisplayStart, String sEcho, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataByTag_call method_call = new getDataByTag_call(tagName, iDisplayLength, iDisplayStart, sEcho, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataByTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagName;
      private int iDisplayLength;
      private int iDisplayStart;
      private String sEcho;
      public getDataByTag_call(String tagName, int iDisplayLength, int iDisplayStart, String sEcho, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagName = tagName;
        this.iDisplayLength = iDisplayLength;
        this.iDisplayStart = iDisplayStart;
        this.sEcho = sEcho;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataByTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataByTag_args args = new getDataByTag_args();
        args.setTagName(tagName);
        args.setIDisplayLength(iDisplayLength);
        args.setIDisplayStart(iDisplayStart);
        args.setSEcho(sEcho);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HPListModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataByTag();
      }
    }

    public void getCategoryDataById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategoryDataById_call method_call = new getCategoryDataById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCategoryDataById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getCategoryDataById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategoryDataById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategoryDataById_args args = new getCategoryDataById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CategoryModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategoryDataById();
      }
    }

    public void getHpDataByHpNum(String hp_num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHpDataByHpNum_call method_call = new getHpDataByHpNum_call(hp_num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHpDataByHpNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hp_num;
      public getHpDataByHpNum_call(String hp_num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hp_num = hp_num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHpDataByHpNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHpDataByHpNum_args args = new getHpDataByHpNum_args();
        args.setHp_num(hp_num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HPModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHpDataByHpNum();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDataByTag", new getDataByTag());
      processMap.put("getCategoryDataById", new getCategoryDataById());
      processMap.put("getHpDataByHpNum", new getHpDataByHpNum());
      return processMap;
    }

    public static class getDataByTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataByTag_args> {
      public getDataByTag() {
        super("getDataByTag");
      }

      public getDataByTag_args getEmptyArgsInstance() {
        return new getDataByTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataByTag_result getResult(I iface, getDataByTag_args args) throws org.apache.thrift.TException {
        getDataByTag_result result = new getDataByTag_result();
        result.success = iface.getDataByTag(args.tagName, args.iDisplayLength, args.iDisplayStart, args.sEcho);
        return result;
      }
    }

    public static class getCategoryDataById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCategoryDataById_args> {
      public getCategoryDataById() {
        super("getCategoryDataById");
      }

      public getCategoryDataById_args getEmptyArgsInstance() {
        return new getCategoryDataById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCategoryDataById_result getResult(I iface, getCategoryDataById_args args) throws org.apache.thrift.TException {
        getCategoryDataById_result result = new getCategoryDataById_result();
        result.success = iface.getCategoryDataById(args.id);
        return result;
      }
    }

    public static class getHpDataByHpNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHpDataByHpNum_args> {
      public getHpDataByHpNum() {
        super("getHpDataByHpNum");
      }

      public getHpDataByHpNum_args getEmptyArgsInstance() {
        return new getHpDataByHpNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHpDataByHpNum_result getResult(I iface, getHpDataByHpNum_args args) throws org.apache.thrift.TException {
        getHpDataByHpNum_result result = new getHpDataByHpNum_result();
        result.success = iface.getHpDataByHpNum(args.hp_num);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDataByTag", new getDataByTag());
      processMap.put("getCategoryDataById", new getCategoryDataById());
      processMap.put("getHpDataByHpNum", new getHpDataByHpNum());
      return processMap;
    }

    public static class getDataByTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataByTag_args, HPListModel> {
      public getDataByTag() {
        super("getDataByTag");
      }

      public getDataByTag_args getEmptyArgsInstance() {
        return new getDataByTag_args();
      }

      public AsyncMethodCallback<HPListModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HPListModel>() { 
          public void onComplete(HPListModel o) {
            getDataByTag_result result = new getDataByTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataByTag_result result = new getDataByTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataByTag_args args, org.apache.thrift.async.AsyncMethodCallback<HPListModel> resultHandler) throws TException {
        iface.getDataByTag(args.tagName, args.iDisplayLength, args.iDisplayStart, args.sEcho,resultHandler);
      }
    }

    public static class getCategoryDataById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCategoryDataById_args, List<CategoryModel>> {
      public getCategoryDataById() {
        super("getCategoryDataById");
      }

      public getCategoryDataById_args getEmptyArgsInstance() {
        return new getCategoryDataById_args();
      }

      public AsyncMethodCallback<List<CategoryModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CategoryModel>>() { 
          public void onComplete(List<CategoryModel> o) {
            getCategoryDataById_result result = new getCategoryDataById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCategoryDataById_result result = new getCategoryDataById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCategoryDataById_args args, org.apache.thrift.async.AsyncMethodCallback<List<CategoryModel>> resultHandler) throws TException {
        iface.getCategoryDataById(args.id,resultHandler);
      }
    }

    public static class getHpDataByHpNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHpDataByHpNum_args, HPModel> {
      public getHpDataByHpNum() {
        super("getHpDataByHpNum");
      }

      public getHpDataByHpNum_args getEmptyArgsInstance() {
        return new getHpDataByHpNum_args();
      }

      public AsyncMethodCallback<HPModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HPModel>() { 
          public void onComplete(HPModel o) {
            getHpDataByHpNum_result result = new getHpDataByHpNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHpDataByHpNum_result result = new getHpDataByHpNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHpDataByHpNum_args args, org.apache.thrift.async.AsyncMethodCallback<HPModel> resultHandler) throws TException {
        iface.getHpDataByHpNum(args.hp_num,resultHandler);
      }
    }

  }

  public static class getDataByTag_args implements org.apache.thrift.TBase<getDataByTag_args, getDataByTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataByTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataByTag_args");

    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField I_DISPLAY_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("iDisplayLength", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField I_DISPLAY_START_FIELD_DESC = new org.apache.thrift.protocol.TField("iDisplayStart", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField S_ECHO_FIELD_DESC = new org.apache.thrift.protocol.TField("sEcho", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataByTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataByTag_argsTupleSchemeFactory());
    }

    public String tagName; // required
    public int iDisplayLength; // required
    public int iDisplayStart; // required
    public String sEcho; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAME((short)1, "tagName"),
      I_DISPLAY_LENGTH((short)2, "iDisplayLength"),
      I_DISPLAY_START((short)3, "iDisplayStart"),
      S_ECHO((short)4, "sEcho");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAME
            return TAG_NAME;
          case 2: // I_DISPLAY_LENGTH
            return I_DISPLAY_LENGTH;
          case 3: // I_DISPLAY_START
            return I_DISPLAY_START;
          case 4: // S_ECHO
            return S_ECHO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDISPLAYLENGTH_ISSET_ID = 0;
    private static final int __IDISPLAYSTART_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.I_DISPLAY_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("iDisplayLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.I_DISPLAY_START, new org.apache.thrift.meta_data.FieldMetaData("iDisplayStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.S_ECHO, new org.apache.thrift.meta_data.FieldMetaData("sEcho", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataByTag_args.class, metaDataMap);
    }

    public getDataByTag_args() {
    }

    public getDataByTag_args(
      String tagName,
      int iDisplayLength,
      int iDisplayStart,
      String sEcho)
    {
      this();
      this.tagName = tagName;
      this.iDisplayLength = iDisplayLength;
      setIDisplayLengthIsSet(true);
      this.iDisplayStart = iDisplayStart;
      setIDisplayStartIsSet(true);
      this.sEcho = sEcho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataByTag_args(getDataByTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
      this.iDisplayLength = other.iDisplayLength;
      this.iDisplayStart = other.iDisplayStart;
      if (other.isSetSEcho()) {
        this.sEcho = other.sEcho;
      }
    }

    public getDataByTag_args deepCopy() {
      return new getDataByTag_args(this);
    }

    @Override
    public void clear() {
      this.tagName = null;
      setIDisplayLengthIsSet(false);
      this.iDisplayLength = 0;
      setIDisplayStartIsSet(false);
      this.iDisplayStart = 0;
      this.sEcho = null;
    }

    public String getTagName() {
      return this.tagName;
    }

    public getDataByTag_args setTagName(String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public int getIDisplayLength() {
      return this.iDisplayLength;
    }

    public getDataByTag_args setIDisplayLength(int iDisplayLength) {
      this.iDisplayLength = iDisplayLength;
      setIDisplayLengthIsSet(true);
      return this;
    }

    public void unsetIDisplayLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDISPLAYLENGTH_ISSET_ID);
    }

    /** Returns true if field iDisplayLength is set (has been assigned a value) and false otherwise */
    public boolean isSetIDisplayLength() {
      return EncodingUtils.testBit(__isset_bitfield, __IDISPLAYLENGTH_ISSET_ID);
    }

    public void setIDisplayLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDISPLAYLENGTH_ISSET_ID, value);
    }

    public int getIDisplayStart() {
      return this.iDisplayStart;
    }

    public getDataByTag_args setIDisplayStart(int iDisplayStart) {
      this.iDisplayStart = iDisplayStart;
      setIDisplayStartIsSet(true);
      return this;
    }

    public void unsetIDisplayStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDISPLAYSTART_ISSET_ID);
    }

    /** Returns true if field iDisplayStart is set (has been assigned a value) and false otherwise */
    public boolean isSetIDisplayStart() {
      return EncodingUtils.testBit(__isset_bitfield, __IDISPLAYSTART_ISSET_ID);
    }

    public void setIDisplayStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDISPLAYSTART_ISSET_ID, value);
    }

    public String getSEcho() {
      return this.sEcho;
    }

    public getDataByTag_args setSEcho(String sEcho) {
      this.sEcho = sEcho;
      return this;
    }

    public void unsetSEcho() {
      this.sEcho = null;
    }

    /** Returns true if field sEcho is set (has been assigned a value) and false otherwise */
    public boolean isSetSEcho() {
      return this.sEcho != null;
    }

    public void setSEchoIsSet(boolean value) {
      if (!value) {
        this.sEcho = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((String)value);
        }
        break;

      case I_DISPLAY_LENGTH:
        if (value == null) {
          unsetIDisplayLength();
        } else {
          setIDisplayLength((Integer)value);
        }
        break;

      case I_DISPLAY_START:
        if (value == null) {
          unsetIDisplayStart();
        } else {
          setIDisplayStart((Integer)value);
        }
        break;

      case S_ECHO:
        if (value == null) {
          unsetSEcho();
        } else {
          setSEcho((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAME:
        return getTagName();

      case I_DISPLAY_LENGTH:
        return getIDisplayLength();

      case I_DISPLAY_START:
        return getIDisplayStart();

      case S_ECHO:
        return getSEcho();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAME:
        return isSetTagName();
      case I_DISPLAY_LENGTH:
        return isSetIDisplayLength();
      case I_DISPLAY_START:
        return isSetIDisplayStart();
      case S_ECHO:
        return isSetSEcho();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataByTag_args)
        return this.equals((getDataByTag_args)that);
      return false;
    }

    public boolean equals(getDataByTag_args that) {
      if (that == null)
        return false;

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      boolean this_present_iDisplayLength = true;
      boolean that_present_iDisplayLength = true;
      if (this_present_iDisplayLength || that_present_iDisplayLength) {
        if (!(this_present_iDisplayLength && that_present_iDisplayLength))
          return false;
        if (this.iDisplayLength != that.iDisplayLength)
          return false;
      }

      boolean this_present_iDisplayStart = true;
      boolean that_present_iDisplayStart = true;
      if (this_present_iDisplayStart || that_present_iDisplayStart) {
        if (!(this_present_iDisplayStart && that_present_iDisplayStart))
          return false;
        if (this.iDisplayStart != that.iDisplayStart)
          return false;
      }

      boolean this_present_sEcho = true && this.isSetSEcho();
      boolean that_present_sEcho = true && that.isSetSEcho();
      if (this_present_sEcho || that_present_sEcho) {
        if (!(this_present_sEcho && that_present_sEcho))
          return false;
        if (!this.sEcho.equals(that.sEcho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagName = true && (isSetTagName());
      list.add(present_tagName);
      if (present_tagName)
        list.add(tagName);

      boolean present_iDisplayLength = true;
      list.add(present_iDisplayLength);
      if (present_iDisplayLength)
        list.add(iDisplayLength);

      boolean present_iDisplayStart = true;
      list.add(present_iDisplayStart);
      if (present_iDisplayStart)
        list.add(iDisplayStart);

      boolean present_sEcho = true && (isSetSEcho());
      list.add(present_sEcho);
      if (present_sEcho)
        list.add(sEcho);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataByTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIDisplayLength()).compareTo(other.isSetIDisplayLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIDisplayLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDisplayLength, other.iDisplayLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIDisplayStart()).compareTo(other.isSetIDisplayStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIDisplayStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iDisplayStart, other.iDisplayStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSEcho()).compareTo(other.isSetSEcho());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSEcho()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sEcho, other.sEcho);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataByTag_args(");
      boolean first = true;

      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iDisplayLength:");
      sb.append(this.iDisplayLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iDisplayStart:");
      sb.append(this.iDisplayStart);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sEcho:");
      if (this.sEcho == null) {
        sb.append("null");
      } else {
        sb.append(this.sEcho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataByTag_argsStandardSchemeFactory implements SchemeFactory {
      public getDataByTag_argsStandardScheme getScheme() {
        return new getDataByTag_argsStandardScheme();
      }
    }

    private static class getDataByTag_argsStandardScheme extends StandardScheme<getDataByTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataByTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagName = iprot.readString();
                struct.setTagNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_DISPLAY_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iDisplayLength = iprot.readI32();
                struct.setIDisplayLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // I_DISPLAY_START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iDisplayStart = iprot.readI32();
                struct.setIDisplayStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // S_ECHO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sEcho = iprot.readString();
                struct.setSEchoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataByTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagName != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tagName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_DISPLAY_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.iDisplayLength);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_DISPLAY_START_FIELD_DESC);
        oprot.writeI32(struct.iDisplayStart);
        oprot.writeFieldEnd();
        if (struct.sEcho != null) {
          oprot.writeFieldBegin(S_ECHO_FIELD_DESC);
          oprot.writeString(struct.sEcho);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataByTag_argsTupleSchemeFactory implements SchemeFactory {
      public getDataByTag_argsTupleScheme getScheme() {
        return new getDataByTag_argsTupleScheme();
      }
    }

    private static class getDataByTag_argsTupleScheme extends TupleScheme<getDataByTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataByTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagName()) {
          optionals.set(0);
        }
        if (struct.isSetIDisplayLength()) {
          optionals.set(1);
        }
        if (struct.isSetIDisplayStart()) {
          optionals.set(2);
        }
        if (struct.isSetSEcho()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTagName()) {
          oprot.writeString(struct.tagName);
        }
        if (struct.isSetIDisplayLength()) {
          oprot.writeI32(struct.iDisplayLength);
        }
        if (struct.isSetIDisplayStart()) {
          oprot.writeI32(struct.iDisplayStart);
        }
        if (struct.isSetSEcho()) {
          oprot.writeString(struct.sEcho);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataByTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tagName = iprot.readString();
          struct.setTagNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iDisplayLength = iprot.readI32();
          struct.setIDisplayLengthIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iDisplayStart = iprot.readI32();
          struct.setIDisplayStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sEcho = iprot.readString();
          struct.setSEchoIsSet(true);
        }
      }
    }

  }

  public static class getDataByTag_result implements org.apache.thrift.TBase<getDataByTag_result, getDataByTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataByTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataByTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataByTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataByTag_resultTupleSchemeFactory());
    }

    public HPListModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HPListModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataByTag_result.class, metaDataMap);
    }

    public getDataByTag_result() {
    }

    public getDataByTag_result(
      HPListModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataByTag_result(getDataByTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new HPListModel(other.success);
      }
    }

    public getDataByTag_result deepCopy() {
      return new getDataByTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HPListModel getSuccess() {
      return this.success;
    }

    public getDataByTag_result setSuccess(HPListModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HPListModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataByTag_result)
        return this.equals((getDataByTag_result)that);
      return false;
    }

    public boolean equals(getDataByTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataByTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataByTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataByTag_resultStandardSchemeFactory implements SchemeFactory {
      public getDataByTag_resultStandardScheme getScheme() {
        return new getDataByTag_resultStandardScheme();
      }
    }

    private static class getDataByTag_resultStandardScheme extends StandardScheme<getDataByTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataByTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HPListModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataByTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataByTag_resultTupleSchemeFactory implements SchemeFactory {
      public getDataByTag_resultTupleScheme getScheme() {
        return new getDataByTag_resultTupleScheme();
      }
    }

    private static class getDataByTag_resultTupleScheme extends TupleScheme<getDataByTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataByTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataByTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HPListModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCategoryDataById_args implements org.apache.thrift.TBase<getCategoryDataById_args, getCategoryDataById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCategoryDataById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryDataById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryDataById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryDataById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryDataById_args.class, metaDataMap);
    }

    public getCategoryDataById_args() {
    }

    public getCategoryDataById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryDataById_args(getCategoryDataById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getCategoryDataById_args deepCopy() {
      return new getCategoryDataById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getCategoryDataById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryDataById_args)
        return this.equals((getCategoryDataById_args)that);
      return false;
    }

    public boolean equals(getCategoryDataById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCategoryDataById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryDataById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryDataById_argsStandardSchemeFactory implements SchemeFactory {
      public getCategoryDataById_argsStandardScheme getScheme() {
        return new getCategoryDataById_argsStandardScheme();
      }
    }

    private static class getCategoryDataById_argsStandardScheme extends StandardScheme<getCategoryDataById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryDataById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryDataById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryDataById_argsTupleSchemeFactory implements SchemeFactory {
      public getCategoryDataById_argsTupleScheme getScheme() {
        return new getCategoryDataById_argsTupleScheme();
      }
    }

    private static class getCategoryDataById_argsTupleScheme extends TupleScheme<getCategoryDataById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryDataById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryDataById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getCategoryDataById_result implements org.apache.thrift.TBase<getCategoryDataById_result, getCategoryDataById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCategoryDataById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryDataById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryDataById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryDataById_resultTupleSchemeFactory());
    }

    public List<CategoryModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CategoryModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryDataById_result.class, metaDataMap);
    }

    public getCategoryDataById_result() {
    }

    public getCategoryDataById_result(
      List<CategoryModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryDataById_result(getCategoryDataById_result other) {
      if (other.isSetSuccess()) {
        List<CategoryModel> __this__success = new ArrayList<CategoryModel>(other.success.size());
        for (CategoryModel other_element : other.success) {
          __this__success.add(new CategoryModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCategoryDataById_result deepCopy() {
      return new getCategoryDataById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CategoryModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CategoryModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<CategoryModel>();
      }
      this.success.add(elem);
    }

    public List<CategoryModel> getSuccess() {
      return this.success;
    }

    public getCategoryDataById_result setSuccess(List<CategoryModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CategoryModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryDataById_result)
        return this.equals((getCategoryDataById_result)that);
      return false;
    }

    public boolean equals(getCategoryDataById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCategoryDataById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryDataById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryDataById_resultStandardSchemeFactory implements SchemeFactory {
      public getCategoryDataById_resultStandardScheme getScheme() {
        return new getCategoryDataById_resultStandardScheme();
      }
    }

    private static class getCategoryDataById_resultStandardScheme extends StandardScheme<getCategoryDataById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryDataById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<CategoryModel>(_list8.size);
                  CategoryModel _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new CategoryModel();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryDataById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CategoryModel _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryDataById_resultTupleSchemeFactory implements SchemeFactory {
      public getCategoryDataById_resultTupleScheme getScheme() {
        return new getCategoryDataById_resultTupleScheme();
      }
    }

    private static class getCategoryDataById_resultTupleScheme extends TupleScheme<getCategoryDataById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryDataById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CategoryModel _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryDataById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CategoryModel>(_list13.size);
            CategoryModel _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new CategoryModel();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHpDataByHpNum_args implements org.apache.thrift.TBase<getHpDataByHpNum_args, getHpDataByHpNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHpDataByHpNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHpDataByHpNum_args");

    private static final org.apache.thrift.protocol.TField HP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("hp_num", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHpDataByHpNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHpDataByHpNum_argsTupleSchemeFactory());
    }

    public String hp_num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HP_NUM((short)1, "hp_num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HP_NUM
            return HP_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HP_NUM, new org.apache.thrift.meta_data.FieldMetaData("hp_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHpDataByHpNum_args.class, metaDataMap);
    }

    public getHpDataByHpNum_args() {
    }

    public getHpDataByHpNum_args(
      String hp_num)
    {
      this();
      this.hp_num = hp_num;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHpDataByHpNum_args(getHpDataByHpNum_args other) {
      if (other.isSetHp_num()) {
        this.hp_num = other.hp_num;
      }
    }

    public getHpDataByHpNum_args deepCopy() {
      return new getHpDataByHpNum_args(this);
    }

    @Override
    public void clear() {
      this.hp_num = null;
    }

    public String getHp_num() {
      return this.hp_num;
    }

    public getHpDataByHpNum_args setHp_num(String hp_num) {
      this.hp_num = hp_num;
      return this;
    }

    public void unsetHp_num() {
      this.hp_num = null;
    }

    /** Returns true if field hp_num is set (has been assigned a value) and false otherwise */
    public boolean isSetHp_num() {
      return this.hp_num != null;
    }

    public void setHp_numIsSet(boolean value) {
      if (!value) {
        this.hp_num = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HP_NUM:
        if (value == null) {
          unsetHp_num();
        } else {
          setHp_num((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HP_NUM:
        return getHp_num();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HP_NUM:
        return isSetHp_num();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHpDataByHpNum_args)
        return this.equals((getHpDataByHpNum_args)that);
      return false;
    }

    public boolean equals(getHpDataByHpNum_args that) {
      if (that == null)
        return false;

      boolean this_present_hp_num = true && this.isSetHp_num();
      boolean that_present_hp_num = true && that.isSetHp_num();
      if (this_present_hp_num || that_present_hp_num) {
        if (!(this_present_hp_num && that_present_hp_num))
          return false;
        if (!this.hp_num.equals(that.hp_num))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hp_num = true && (isSetHp_num());
      list.add(present_hp_num);
      if (present_hp_num)
        list.add(hp_num);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHpDataByHpNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHp_num()).compareTo(other.isSetHp_num());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHp_num()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hp_num, other.hp_num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHpDataByHpNum_args(");
      boolean first = true;

      sb.append("hp_num:");
      if (this.hp_num == null) {
        sb.append("null");
      } else {
        sb.append(this.hp_num);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHpDataByHpNum_argsStandardSchemeFactory implements SchemeFactory {
      public getHpDataByHpNum_argsStandardScheme getScheme() {
        return new getHpDataByHpNum_argsStandardScheme();
      }
    }

    private static class getHpDataByHpNum_argsStandardScheme extends StandardScheme<getHpDataByHpNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHpDataByHpNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HP_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hp_num = iprot.readString();
                struct.setHp_numIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHpDataByHpNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hp_num != null) {
          oprot.writeFieldBegin(HP_NUM_FIELD_DESC);
          oprot.writeString(struct.hp_num);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHpDataByHpNum_argsTupleSchemeFactory implements SchemeFactory {
      public getHpDataByHpNum_argsTupleScheme getScheme() {
        return new getHpDataByHpNum_argsTupleScheme();
      }
    }

    private static class getHpDataByHpNum_argsTupleScheme extends TupleScheme<getHpDataByHpNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHpDataByHpNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHp_num()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHp_num()) {
          oprot.writeString(struct.hp_num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHpDataByHpNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hp_num = iprot.readString();
          struct.setHp_numIsSet(true);
        }
      }
    }

  }

  public static class getHpDataByHpNum_result implements org.apache.thrift.TBase<getHpDataByHpNum_result, getHpDataByHpNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHpDataByHpNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHpDataByHpNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHpDataByHpNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHpDataByHpNum_resultTupleSchemeFactory());
    }

    public HPModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HPModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHpDataByHpNum_result.class, metaDataMap);
    }

    public getHpDataByHpNum_result() {
    }

    public getHpDataByHpNum_result(
      HPModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHpDataByHpNum_result(getHpDataByHpNum_result other) {
      if (other.isSetSuccess()) {
        this.success = new HPModel(other.success);
      }
    }

    public getHpDataByHpNum_result deepCopy() {
      return new getHpDataByHpNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HPModel getSuccess() {
      return this.success;
    }

    public getHpDataByHpNum_result setSuccess(HPModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HPModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHpDataByHpNum_result)
        return this.equals((getHpDataByHpNum_result)that);
      return false;
    }

    public boolean equals(getHpDataByHpNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHpDataByHpNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHpDataByHpNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHpDataByHpNum_resultStandardSchemeFactory implements SchemeFactory {
      public getHpDataByHpNum_resultStandardScheme getScheme() {
        return new getHpDataByHpNum_resultStandardScheme();
      }
    }

    private static class getHpDataByHpNum_resultStandardScheme extends StandardScheme<getHpDataByHpNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHpDataByHpNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HPModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHpDataByHpNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHpDataByHpNum_resultTupleSchemeFactory implements SchemeFactory {
      public getHpDataByHpNum_resultTupleScheme getScheme() {
        return new getHpDataByHpNum_resultTupleScheme();
      }
    }

    private static class getHpDataByHpNum_resultTupleScheme extends TupleScheme<getHpDataByHpNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHpDataByHpNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHpDataByHpNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HPModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
