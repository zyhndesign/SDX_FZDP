/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cidic.sdx.remote;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-16")
public class HPModel implements org.apache.thrift.TBase<HPModel, HPModel._Fields>, java.io.Serializable, Cloneable, Comparable<HPModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HPModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("hp_num", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hpName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROXY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyPrice", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField F_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("fPrice", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField S_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("sPrice", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField T_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tPrice", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField F1_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("f1Price", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField F2_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("f2Price", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField F3_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("f3Price", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TIME_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCategory", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField IS_PAN_DIAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isPanDian", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField KUAN_XING_FIELD_DESC = new org.apache.thrift.protocol.TField("kuanXing", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BAN_XING_FIELD_DESC = new org.apache.thrift.protocol.TField("banXing", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField UP_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("upDown", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField HUO_PAN_FIELD_DESC = new org.apache.thrift.protocol.TField("huoPan", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField CUNHUO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cunhuo_type", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PRICE_SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("priceSegment", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PRODUCTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productionType", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField RELEVENT_METTING_FIELD_DESC = new org.apache.thrift.protocol.TField("releventMetting", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField METTING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mettingTime", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PRODUCTION_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("productionArea", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField ENTRY_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPerson", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField ENTRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("entryTime", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField UPDATE_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("updatePerson", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField EFFECT_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("effectPerson", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField EFFECT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("effectTime", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField FAILURE_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("failurePerson", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField FAILURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("failureTime", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField IMAGE_URL1_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl1", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField IMAGE_URL2_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl2", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField IMAGE_URL3_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl3", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField BRAND_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("brandList", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField CATEGORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryList", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField SIZE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeList", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField COLOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("colorList", org.apache.thrift.protocol.TType.STRING, (short)46);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HPModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HPModelTupleSchemeFactory());
  }

  public int id; // required
  public String hp_num; // required
  public String hpName; // required
  public String brand; // required
  public String category; // required
  public String size; // required
  public String color; // required
  public String price; // required
  public String proxyPrice; // optional
  public String fPrice; // optional
  public String sPrice; // optional
  public String tPrice; // optional
  public String f1Price; // optional
  public String f2Price; // optional
  public String f3Price; // optional
  public String createTime; // optional
  public String state; // optional
  public String timeCategory; // optional
  public String remark; // optional
  public String unit; // optional
  public String isPanDian; // optional
  public String kuanXing; // optional
  public String banXing; // optional
  public String upDown; // optional
  public String huoPan; // optional
  public String cunhuo_type; // optional
  public String priceSegment; // optional
  public String productionType; // optional
  public String releventMetting; // optional
  public String mettingTime; // optional
  public String productionArea; // optional
  public String entryPerson; // optional
  public String entryTime; // optional
  public String updatePerson; // optional
  public String updateTime; // optional
  public String effectPerson; // optional
  public String effectTime; // optional
  public String failurePerson; // optional
  public String failureTime; // optional
  public String imageUrl1; // optional
  public String imageUrl2; // optional
  public String imageUrl3; // optional
  public String brandList; // optional
  public String categoryList; // optional
  public String sizeList; // optional
  public String colorList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HP_NUM((short)2, "hp_num"),
    HP_NAME((short)3, "hpName"),
    BRAND((short)4, "brand"),
    CATEGORY((short)5, "category"),
    SIZE((short)6, "size"),
    COLOR((short)7, "color"),
    PRICE((short)8, "price"),
    PROXY_PRICE((short)9, "proxyPrice"),
    F_PRICE((short)10, "fPrice"),
    S_PRICE((short)11, "sPrice"),
    T_PRICE((short)12, "tPrice"),
    F1_PRICE((short)13, "f1Price"),
    F2_PRICE((short)14, "f2Price"),
    F3_PRICE((short)15, "f3Price"),
    CREATE_TIME((short)16, "createTime"),
    STATE((short)17, "state"),
    TIME_CATEGORY((short)18, "timeCategory"),
    REMARK((short)19, "remark"),
    UNIT((short)20, "unit"),
    IS_PAN_DIAN((short)21, "isPanDian"),
    KUAN_XING((short)22, "kuanXing"),
    BAN_XING((short)23, "banXing"),
    UP_DOWN((short)24, "upDown"),
    HUO_PAN((short)25, "huoPan"),
    CUNHUO_TYPE((short)26, "cunhuo_type"),
    PRICE_SEGMENT((short)27, "priceSegment"),
    PRODUCTION_TYPE((short)28, "productionType"),
    RELEVENT_METTING((short)29, "releventMetting"),
    METTING_TIME((short)30, "mettingTime"),
    PRODUCTION_AREA((short)31, "productionArea"),
    ENTRY_PERSON((short)32, "entryPerson"),
    ENTRY_TIME((short)33, "entryTime"),
    UPDATE_PERSON((short)34, "updatePerson"),
    UPDATE_TIME((short)35, "updateTime"),
    EFFECT_PERSON((short)36, "effectPerson"),
    EFFECT_TIME((short)37, "effectTime"),
    FAILURE_PERSON((short)38, "failurePerson"),
    FAILURE_TIME((short)39, "failureTime"),
    IMAGE_URL1((short)40, "imageUrl1"),
    IMAGE_URL2((short)41, "imageUrl2"),
    IMAGE_URL3((short)42, "imageUrl3"),
    BRAND_LIST((short)43, "brandList"),
    CATEGORY_LIST((short)44, "categoryList"),
    SIZE_LIST((short)45, "sizeList"),
    COLOR_LIST((short)46, "colorList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HP_NUM
          return HP_NUM;
        case 3: // HP_NAME
          return HP_NAME;
        case 4: // BRAND
          return BRAND;
        case 5: // CATEGORY
          return CATEGORY;
        case 6: // SIZE
          return SIZE;
        case 7: // COLOR
          return COLOR;
        case 8: // PRICE
          return PRICE;
        case 9: // PROXY_PRICE
          return PROXY_PRICE;
        case 10: // F_PRICE
          return F_PRICE;
        case 11: // S_PRICE
          return S_PRICE;
        case 12: // T_PRICE
          return T_PRICE;
        case 13: // F1_PRICE
          return F1_PRICE;
        case 14: // F2_PRICE
          return F2_PRICE;
        case 15: // F3_PRICE
          return F3_PRICE;
        case 16: // CREATE_TIME
          return CREATE_TIME;
        case 17: // STATE
          return STATE;
        case 18: // TIME_CATEGORY
          return TIME_CATEGORY;
        case 19: // REMARK
          return REMARK;
        case 20: // UNIT
          return UNIT;
        case 21: // IS_PAN_DIAN
          return IS_PAN_DIAN;
        case 22: // KUAN_XING
          return KUAN_XING;
        case 23: // BAN_XING
          return BAN_XING;
        case 24: // UP_DOWN
          return UP_DOWN;
        case 25: // HUO_PAN
          return HUO_PAN;
        case 26: // CUNHUO_TYPE
          return CUNHUO_TYPE;
        case 27: // PRICE_SEGMENT
          return PRICE_SEGMENT;
        case 28: // PRODUCTION_TYPE
          return PRODUCTION_TYPE;
        case 29: // RELEVENT_METTING
          return RELEVENT_METTING;
        case 30: // METTING_TIME
          return METTING_TIME;
        case 31: // PRODUCTION_AREA
          return PRODUCTION_AREA;
        case 32: // ENTRY_PERSON
          return ENTRY_PERSON;
        case 33: // ENTRY_TIME
          return ENTRY_TIME;
        case 34: // UPDATE_PERSON
          return UPDATE_PERSON;
        case 35: // UPDATE_TIME
          return UPDATE_TIME;
        case 36: // EFFECT_PERSON
          return EFFECT_PERSON;
        case 37: // EFFECT_TIME
          return EFFECT_TIME;
        case 38: // FAILURE_PERSON
          return FAILURE_PERSON;
        case 39: // FAILURE_TIME
          return FAILURE_TIME;
        case 40: // IMAGE_URL1
          return IMAGE_URL1;
        case 41: // IMAGE_URL2
          return IMAGE_URL2;
        case 42: // IMAGE_URL3
          return IMAGE_URL3;
        case 43: // BRAND_LIST
          return BRAND_LIST;
        case 44: // CATEGORY_LIST
          return CATEGORY_LIST;
        case 45: // SIZE_LIST
          return SIZE_LIST;
        case 46: // COLOR_LIST
          return COLOR_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROXY_PRICE,_Fields.F_PRICE,_Fields.S_PRICE,_Fields.T_PRICE,_Fields.F1_PRICE,_Fields.F2_PRICE,_Fields.F3_PRICE,_Fields.CREATE_TIME,_Fields.STATE,_Fields.TIME_CATEGORY,_Fields.REMARK,_Fields.UNIT,_Fields.IS_PAN_DIAN,_Fields.KUAN_XING,_Fields.BAN_XING,_Fields.UP_DOWN,_Fields.HUO_PAN,_Fields.CUNHUO_TYPE,_Fields.PRICE_SEGMENT,_Fields.PRODUCTION_TYPE,_Fields.RELEVENT_METTING,_Fields.METTING_TIME,_Fields.PRODUCTION_AREA,_Fields.ENTRY_PERSON,_Fields.ENTRY_TIME,_Fields.UPDATE_PERSON,_Fields.UPDATE_TIME,_Fields.EFFECT_PERSON,_Fields.EFFECT_TIME,_Fields.FAILURE_PERSON,_Fields.FAILURE_TIME,_Fields.IMAGE_URL1,_Fields.IMAGE_URL2,_Fields.IMAGE_URL3,_Fields.BRAND_LIST,_Fields.CATEGORY_LIST,_Fields.SIZE_LIST,_Fields.COLOR_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HP_NUM, new org.apache.thrift.meta_data.FieldMetaData("hp_num", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HP_NAME, new org.apache.thrift.meta_data.FieldMetaData("hpName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROXY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("proxyPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F_PRICE, new org.apache.thrift.meta_data.FieldMetaData("fPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S_PRICE, new org.apache.thrift.meta_data.FieldMetaData("sPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.T_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F1_PRICE, new org.apache.thrift.meta_data.FieldMetaData("f1Price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F2_PRICE, new org.apache.thrift.meta_data.FieldMetaData("f2Price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.F3_PRICE, new org.apache.thrift.meta_data.FieldMetaData("f3Price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("timeCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PAN_DIAN, new org.apache.thrift.meta_data.FieldMetaData("isPanDian", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUAN_XING, new org.apache.thrift.meta_data.FieldMetaData("kuanXing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAN_XING, new org.apache.thrift.meta_data.FieldMetaData("banXing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UP_DOWN, new org.apache.thrift.meta_data.FieldMetaData("upDown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HUO_PAN, new org.apache.thrift.meta_data.FieldMetaData("huoPan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUNHUO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cunhuo_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("priceSegment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productionType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEVENT_METTING, new org.apache.thrift.meta_data.FieldMetaData("releventMetting", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METTING_TIME, new org.apache.thrift.meta_data.FieldMetaData("mettingTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCTION_AREA, new org.apache.thrift.meta_data.FieldMetaData("productionArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_PERSON, new org.apache.thrift.meta_data.FieldMetaData("entryPerson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("entryTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_PERSON, new org.apache.thrift.meta_data.FieldMetaData("updatePerson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EFFECT_PERSON, new org.apache.thrift.meta_data.FieldMetaData("effectPerson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EFFECT_TIME, new org.apache.thrift.meta_data.FieldMetaData("effectTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILURE_PERSON, new org.apache.thrift.meta_data.FieldMetaData("failurePerson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("failureTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL1, new org.apache.thrift.meta_data.FieldMetaData("imageUrl1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL2, new org.apache.thrift.meta_data.FieldMetaData("imageUrl2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL3, new org.apache.thrift.meta_data.FieldMetaData("imageUrl3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_LIST, new org.apache.thrift.meta_data.FieldMetaData("brandList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("categoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_LIST, new org.apache.thrift.meta_data.FieldMetaData("sizeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("colorList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HPModel.class, metaDataMap);
  }

  public HPModel() {
  }

  public HPModel(
    int id,
    String hp_num,
    String hpName,
    String brand,
    String category,
    String size,
    String color,
    String price)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.hp_num = hp_num;
    this.hpName = hpName;
    this.brand = brand;
    this.category = category;
    this.size = size;
    this.color = color;
    this.price = price;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HPModel(HPModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetHp_num()) {
      this.hp_num = other.hp_num;
    }
    if (other.isSetHpName()) {
      this.hpName = other.hpName;
    }
    if (other.isSetBrand()) {
      this.brand = other.brand;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetSize()) {
      this.size = other.size;
    }
    if (other.isSetColor()) {
      this.color = other.color;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetProxyPrice()) {
      this.proxyPrice = other.proxyPrice;
    }
    if (other.isSetFPrice()) {
      this.fPrice = other.fPrice;
    }
    if (other.isSetSPrice()) {
      this.sPrice = other.sPrice;
    }
    if (other.isSetTPrice()) {
      this.tPrice = other.tPrice;
    }
    if (other.isSetF1Price()) {
      this.f1Price = other.f1Price;
    }
    if (other.isSetF2Price()) {
      this.f2Price = other.f2Price;
    }
    if (other.isSetF3Price()) {
      this.f3Price = other.f3Price;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetTimeCategory()) {
      this.timeCategory = other.timeCategory;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    if (other.isSetIsPanDian()) {
      this.isPanDian = other.isPanDian;
    }
    if (other.isSetKuanXing()) {
      this.kuanXing = other.kuanXing;
    }
    if (other.isSetBanXing()) {
      this.banXing = other.banXing;
    }
    if (other.isSetUpDown()) {
      this.upDown = other.upDown;
    }
    if (other.isSetHuoPan()) {
      this.huoPan = other.huoPan;
    }
    if (other.isSetCunhuo_type()) {
      this.cunhuo_type = other.cunhuo_type;
    }
    if (other.isSetPriceSegment()) {
      this.priceSegment = other.priceSegment;
    }
    if (other.isSetProductionType()) {
      this.productionType = other.productionType;
    }
    if (other.isSetReleventMetting()) {
      this.releventMetting = other.releventMetting;
    }
    if (other.isSetMettingTime()) {
      this.mettingTime = other.mettingTime;
    }
    if (other.isSetProductionArea()) {
      this.productionArea = other.productionArea;
    }
    if (other.isSetEntryPerson()) {
      this.entryPerson = other.entryPerson;
    }
    if (other.isSetEntryTime()) {
      this.entryTime = other.entryTime;
    }
    if (other.isSetUpdatePerson()) {
      this.updatePerson = other.updatePerson;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetEffectPerson()) {
      this.effectPerson = other.effectPerson;
    }
    if (other.isSetEffectTime()) {
      this.effectTime = other.effectTime;
    }
    if (other.isSetFailurePerson()) {
      this.failurePerson = other.failurePerson;
    }
    if (other.isSetFailureTime()) {
      this.failureTime = other.failureTime;
    }
    if (other.isSetImageUrl1()) {
      this.imageUrl1 = other.imageUrl1;
    }
    if (other.isSetImageUrl2()) {
      this.imageUrl2 = other.imageUrl2;
    }
    if (other.isSetImageUrl3()) {
      this.imageUrl3 = other.imageUrl3;
    }
    if (other.isSetBrandList()) {
      this.brandList = other.brandList;
    }
    if (other.isSetCategoryList()) {
      this.categoryList = other.categoryList;
    }
    if (other.isSetSizeList()) {
      this.sizeList = other.sizeList;
    }
    if (other.isSetColorList()) {
      this.colorList = other.colorList;
    }
  }

  public HPModel deepCopy() {
    return new HPModel(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.hp_num = null;
    this.hpName = null;
    this.brand = null;
    this.category = null;
    this.size = null;
    this.color = null;
    this.price = null;
    this.proxyPrice = null;
    this.fPrice = null;
    this.sPrice = null;
    this.tPrice = null;
    this.f1Price = null;
    this.f2Price = null;
    this.f3Price = null;
    this.createTime = null;
    this.state = null;
    this.timeCategory = null;
    this.remark = null;
    this.unit = null;
    this.isPanDian = null;
    this.kuanXing = null;
    this.banXing = null;
    this.upDown = null;
    this.huoPan = null;
    this.cunhuo_type = null;
    this.priceSegment = null;
    this.productionType = null;
    this.releventMetting = null;
    this.mettingTime = null;
    this.productionArea = null;
    this.entryPerson = null;
    this.entryTime = null;
    this.updatePerson = null;
    this.updateTime = null;
    this.effectPerson = null;
    this.effectTime = null;
    this.failurePerson = null;
    this.failureTime = null;
    this.imageUrl1 = null;
    this.imageUrl2 = null;
    this.imageUrl3 = null;
    this.brandList = null;
    this.categoryList = null;
    this.sizeList = null;
    this.colorList = null;
  }

  public int getId() {
    return this.id;
  }

  public HPModel setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getHp_num() {
    return this.hp_num;
  }

  public HPModel setHp_num(String hp_num) {
    this.hp_num = hp_num;
    return this;
  }

  public void unsetHp_num() {
    this.hp_num = null;
  }

  /** Returns true if field hp_num is set (has been assigned a value) and false otherwise */
  public boolean isSetHp_num() {
    return this.hp_num != null;
  }

  public void setHp_numIsSet(boolean value) {
    if (!value) {
      this.hp_num = null;
    }
  }

  public String getHpName() {
    return this.hpName;
  }

  public HPModel setHpName(String hpName) {
    this.hpName = hpName;
    return this;
  }

  public void unsetHpName() {
    this.hpName = null;
  }

  /** Returns true if field hpName is set (has been assigned a value) and false otherwise */
  public boolean isSetHpName() {
    return this.hpName != null;
  }

  public void setHpNameIsSet(boolean value) {
    if (!value) {
      this.hpName = null;
    }
  }

  public String getBrand() {
    return this.brand;
  }

  public HPModel setBrand(String brand) {
    this.brand = brand;
    return this;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  /** Returns true if field brand is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public HPModel setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getSize() {
    return this.size;
  }

  public HPModel setSize(String size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public String getColor() {
    return this.color;
  }

  public HPModel setColor(String color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public HPModel setPrice(String price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public String getProxyPrice() {
    return this.proxyPrice;
  }

  public HPModel setProxyPrice(String proxyPrice) {
    this.proxyPrice = proxyPrice;
    return this;
  }

  public void unsetProxyPrice() {
    this.proxyPrice = null;
  }

  /** Returns true if field proxyPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyPrice() {
    return this.proxyPrice != null;
  }

  public void setProxyPriceIsSet(boolean value) {
    if (!value) {
      this.proxyPrice = null;
    }
  }

  public String getFPrice() {
    return this.fPrice;
  }

  public HPModel setFPrice(String fPrice) {
    this.fPrice = fPrice;
    return this;
  }

  public void unsetFPrice() {
    this.fPrice = null;
  }

  /** Returns true if field fPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetFPrice() {
    return this.fPrice != null;
  }

  public void setFPriceIsSet(boolean value) {
    if (!value) {
      this.fPrice = null;
    }
  }

  public String getSPrice() {
    return this.sPrice;
  }

  public HPModel setSPrice(String sPrice) {
    this.sPrice = sPrice;
    return this;
  }

  public void unsetSPrice() {
    this.sPrice = null;
  }

  /** Returns true if field sPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSPrice() {
    return this.sPrice != null;
  }

  public void setSPriceIsSet(boolean value) {
    if (!value) {
      this.sPrice = null;
    }
  }

  public String getTPrice() {
    return this.tPrice;
  }

  public HPModel setTPrice(String tPrice) {
    this.tPrice = tPrice;
    return this;
  }

  public void unsetTPrice() {
    this.tPrice = null;
  }

  /** Returns true if field tPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTPrice() {
    return this.tPrice != null;
  }

  public void setTPriceIsSet(boolean value) {
    if (!value) {
      this.tPrice = null;
    }
  }

  public String getF1Price() {
    return this.f1Price;
  }

  public HPModel setF1Price(String f1Price) {
    this.f1Price = f1Price;
    return this;
  }

  public void unsetF1Price() {
    this.f1Price = null;
  }

  /** Returns true if field f1Price is set (has been assigned a value) and false otherwise */
  public boolean isSetF1Price() {
    return this.f1Price != null;
  }

  public void setF1PriceIsSet(boolean value) {
    if (!value) {
      this.f1Price = null;
    }
  }

  public String getF2Price() {
    return this.f2Price;
  }

  public HPModel setF2Price(String f2Price) {
    this.f2Price = f2Price;
    return this;
  }

  public void unsetF2Price() {
    this.f2Price = null;
  }

  /** Returns true if field f2Price is set (has been assigned a value) and false otherwise */
  public boolean isSetF2Price() {
    return this.f2Price != null;
  }

  public void setF2PriceIsSet(boolean value) {
    if (!value) {
      this.f2Price = null;
    }
  }

  public String getF3Price() {
    return this.f3Price;
  }

  public HPModel setF3Price(String f3Price) {
    this.f3Price = f3Price;
    return this;
  }

  public void unsetF3Price() {
    this.f3Price = null;
  }

  /** Returns true if field f3Price is set (has been assigned a value) and false otherwise */
  public boolean isSetF3Price() {
    return this.f3Price != null;
  }

  public void setF3PriceIsSet(boolean value) {
    if (!value) {
      this.f3Price = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HPModel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public HPModel setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getTimeCategory() {
    return this.timeCategory;
  }

  public HPModel setTimeCategory(String timeCategory) {
    this.timeCategory = timeCategory;
    return this;
  }

  public void unsetTimeCategory() {
    this.timeCategory = null;
  }

  /** Returns true if field timeCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCategory() {
    return this.timeCategory != null;
  }

  public void setTimeCategoryIsSet(boolean value) {
    if (!value) {
      this.timeCategory = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public HPModel setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getUnit() {
    return this.unit;
  }

  public HPModel setUnit(String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public String getIsPanDian() {
    return this.isPanDian;
  }

  public HPModel setIsPanDian(String isPanDian) {
    this.isPanDian = isPanDian;
    return this;
  }

  public void unsetIsPanDian() {
    this.isPanDian = null;
  }

  /** Returns true if field isPanDian is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPanDian() {
    return this.isPanDian != null;
  }

  public void setIsPanDianIsSet(boolean value) {
    if (!value) {
      this.isPanDian = null;
    }
  }

  public String getKuanXing() {
    return this.kuanXing;
  }

  public HPModel setKuanXing(String kuanXing) {
    this.kuanXing = kuanXing;
    return this;
  }

  public void unsetKuanXing() {
    this.kuanXing = null;
  }

  /** Returns true if field kuanXing is set (has been assigned a value) and false otherwise */
  public boolean isSetKuanXing() {
    return this.kuanXing != null;
  }

  public void setKuanXingIsSet(boolean value) {
    if (!value) {
      this.kuanXing = null;
    }
  }

  public String getBanXing() {
    return this.banXing;
  }

  public HPModel setBanXing(String banXing) {
    this.banXing = banXing;
    return this;
  }

  public void unsetBanXing() {
    this.banXing = null;
  }

  /** Returns true if field banXing is set (has been assigned a value) and false otherwise */
  public boolean isSetBanXing() {
    return this.banXing != null;
  }

  public void setBanXingIsSet(boolean value) {
    if (!value) {
      this.banXing = null;
    }
  }

  public String getUpDown() {
    return this.upDown;
  }

  public HPModel setUpDown(String upDown) {
    this.upDown = upDown;
    return this;
  }

  public void unsetUpDown() {
    this.upDown = null;
  }

  /** Returns true if field upDown is set (has been assigned a value) and false otherwise */
  public boolean isSetUpDown() {
    return this.upDown != null;
  }

  public void setUpDownIsSet(boolean value) {
    if (!value) {
      this.upDown = null;
    }
  }

  public String getHuoPan() {
    return this.huoPan;
  }

  public HPModel setHuoPan(String huoPan) {
    this.huoPan = huoPan;
    return this;
  }

  public void unsetHuoPan() {
    this.huoPan = null;
  }

  /** Returns true if field huoPan is set (has been assigned a value) and false otherwise */
  public boolean isSetHuoPan() {
    return this.huoPan != null;
  }

  public void setHuoPanIsSet(boolean value) {
    if (!value) {
      this.huoPan = null;
    }
  }

  public String getCunhuo_type() {
    return this.cunhuo_type;
  }

  public HPModel setCunhuo_type(String cunhuo_type) {
    this.cunhuo_type = cunhuo_type;
    return this;
  }

  public void unsetCunhuo_type() {
    this.cunhuo_type = null;
  }

  /** Returns true if field cunhuo_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCunhuo_type() {
    return this.cunhuo_type != null;
  }

  public void setCunhuo_typeIsSet(boolean value) {
    if (!value) {
      this.cunhuo_type = null;
    }
  }

  public String getPriceSegment() {
    return this.priceSegment;
  }

  public HPModel setPriceSegment(String priceSegment) {
    this.priceSegment = priceSegment;
    return this;
  }

  public void unsetPriceSegment() {
    this.priceSegment = null;
  }

  /** Returns true if field priceSegment is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceSegment() {
    return this.priceSegment != null;
  }

  public void setPriceSegmentIsSet(boolean value) {
    if (!value) {
      this.priceSegment = null;
    }
  }

  public String getProductionType() {
    return this.productionType;
  }

  public HPModel setProductionType(String productionType) {
    this.productionType = productionType;
    return this;
  }

  public void unsetProductionType() {
    this.productionType = null;
  }

  /** Returns true if field productionType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductionType() {
    return this.productionType != null;
  }

  public void setProductionTypeIsSet(boolean value) {
    if (!value) {
      this.productionType = null;
    }
  }

  public String getReleventMetting() {
    return this.releventMetting;
  }

  public HPModel setReleventMetting(String releventMetting) {
    this.releventMetting = releventMetting;
    return this;
  }

  public void unsetReleventMetting() {
    this.releventMetting = null;
  }

  /** Returns true if field releventMetting is set (has been assigned a value) and false otherwise */
  public boolean isSetReleventMetting() {
    return this.releventMetting != null;
  }

  public void setReleventMettingIsSet(boolean value) {
    if (!value) {
      this.releventMetting = null;
    }
  }

  public String getMettingTime() {
    return this.mettingTime;
  }

  public HPModel setMettingTime(String mettingTime) {
    this.mettingTime = mettingTime;
    return this;
  }

  public void unsetMettingTime() {
    this.mettingTime = null;
  }

  /** Returns true if field mettingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMettingTime() {
    return this.mettingTime != null;
  }

  public void setMettingTimeIsSet(boolean value) {
    if (!value) {
      this.mettingTime = null;
    }
  }

  public String getProductionArea() {
    return this.productionArea;
  }

  public HPModel setProductionArea(String productionArea) {
    this.productionArea = productionArea;
    return this;
  }

  public void unsetProductionArea() {
    this.productionArea = null;
  }

  /** Returns true if field productionArea is set (has been assigned a value) and false otherwise */
  public boolean isSetProductionArea() {
    return this.productionArea != null;
  }

  public void setProductionAreaIsSet(boolean value) {
    if (!value) {
      this.productionArea = null;
    }
  }

  public String getEntryPerson() {
    return this.entryPerson;
  }

  public HPModel setEntryPerson(String entryPerson) {
    this.entryPerson = entryPerson;
    return this;
  }

  public void unsetEntryPerson() {
    this.entryPerson = null;
  }

  /** Returns true if field entryPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPerson() {
    return this.entryPerson != null;
  }

  public void setEntryPersonIsSet(boolean value) {
    if (!value) {
      this.entryPerson = null;
    }
  }

  public String getEntryTime() {
    return this.entryTime;
  }

  public HPModel setEntryTime(String entryTime) {
    this.entryTime = entryTime;
    return this;
  }

  public void unsetEntryTime() {
    this.entryTime = null;
  }

  /** Returns true if field entryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryTime() {
    return this.entryTime != null;
  }

  public void setEntryTimeIsSet(boolean value) {
    if (!value) {
      this.entryTime = null;
    }
  }

  public String getUpdatePerson() {
    return this.updatePerson;
  }

  public HPModel setUpdatePerson(String updatePerson) {
    this.updatePerson = updatePerson;
    return this;
  }

  public void unsetUpdatePerson() {
    this.updatePerson = null;
  }

  /** Returns true if field updatePerson is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatePerson() {
    return this.updatePerson != null;
  }

  public void setUpdatePersonIsSet(boolean value) {
    if (!value) {
      this.updatePerson = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public HPModel setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getEffectPerson() {
    return this.effectPerson;
  }

  public HPModel setEffectPerson(String effectPerson) {
    this.effectPerson = effectPerson;
    return this;
  }

  public void unsetEffectPerson() {
    this.effectPerson = null;
  }

  /** Returns true if field effectPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectPerson() {
    return this.effectPerson != null;
  }

  public void setEffectPersonIsSet(boolean value) {
    if (!value) {
      this.effectPerson = null;
    }
  }

  public String getEffectTime() {
    return this.effectTime;
  }

  public HPModel setEffectTime(String effectTime) {
    this.effectTime = effectTime;
    return this;
  }

  public void unsetEffectTime() {
    this.effectTime = null;
  }

  /** Returns true if field effectTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectTime() {
    return this.effectTime != null;
  }

  public void setEffectTimeIsSet(boolean value) {
    if (!value) {
      this.effectTime = null;
    }
  }

  public String getFailurePerson() {
    return this.failurePerson;
  }

  public HPModel setFailurePerson(String failurePerson) {
    this.failurePerson = failurePerson;
    return this;
  }

  public void unsetFailurePerson() {
    this.failurePerson = null;
  }

  /** Returns true if field failurePerson is set (has been assigned a value) and false otherwise */
  public boolean isSetFailurePerson() {
    return this.failurePerson != null;
  }

  public void setFailurePersonIsSet(boolean value) {
    if (!value) {
      this.failurePerson = null;
    }
  }

  public String getFailureTime() {
    return this.failureTime;
  }

  public HPModel setFailureTime(String failureTime) {
    this.failureTime = failureTime;
    return this;
  }

  public void unsetFailureTime() {
    this.failureTime = null;
  }

  /** Returns true if field failureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureTime() {
    return this.failureTime != null;
  }

  public void setFailureTimeIsSet(boolean value) {
    if (!value) {
      this.failureTime = null;
    }
  }

  public String getImageUrl1() {
    return this.imageUrl1;
  }

  public HPModel setImageUrl1(String imageUrl1) {
    this.imageUrl1 = imageUrl1;
    return this;
  }

  public void unsetImageUrl1() {
    this.imageUrl1 = null;
  }

  /** Returns true if field imageUrl1 is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl1() {
    return this.imageUrl1 != null;
  }

  public void setImageUrl1IsSet(boolean value) {
    if (!value) {
      this.imageUrl1 = null;
    }
  }

  public String getImageUrl2() {
    return this.imageUrl2;
  }

  public HPModel setImageUrl2(String imageUrl2) {
    this.imageUrl2 = imageUrl2;
    return this;
  }

  public void unsetImageUrl2() {
    this.imageUrl2 = null;
  }

  /** Returns true if field imageUrl2 is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl2() {
    return this.imageUrl2 != null;
  }

  public void setImageUrl2IsSet(boolean value) {
    if (!value) {
      this.imageUrl2 = null;
    }
  }

  public String getImageUrl3() {
    return this.imageUrl3;
  }

  public HPModel setImageUrl3(String imageUrl3) {
    this.imageUrl3 = imageUrl3;
    return this;
  }

  public void unsetImageUrl3() {
    this.imageUrl3 = null;
  }

  /** Returns true if field imageUrl3 is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl3() {
    return this.imageUrl3 != null;
  }

  public void setImageUrl3IsSet(boolean value) {
    if (!value) {
      this.imageUrl3 = null;
    }
  }

  public String getBrandList() {
    return this.brandList;
  }

  public HPModel setBrandList(String brandList) {
    this.brandList = brandList;
    return this;
  }

  public void unsetBrandList() {
    this.brandList = null;
  }

  /** Returns true if field brandList is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandList() {
    return this.brandList != null;
  }

  public void setBrandListIsSet(boolean value) {
    if (!value) {
      this.brandList = null;
    }
  }

  public String getCategoryList() {
    return this.categoryList;
  }

  public HPModel setCategoryList(String categoryList) {
    this.categoryList = categoryList;
    return this;
  }

  public void unsetCategoryList() {
    this.categoryList = null;
  }

  /** Returns true if field categoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryList() {
    return this.categoryList != null;
  }

  public void setCategoryListIsSet(boolean value) {
    if (!value) {
      this.categoryList = null;
    }
  }

  public String getSizeList() {
    return this.sizeList;
  }

  public HPModel setSizeList(String sizeList) {
    this.sizeList = sizeList;
    return this;
  }

  public void unsetSizeList() {
    this.sizeList = null;
  }

  /** Returns true if field sizeList is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeList() {
    return this.sizeList != null;
  }

  public void setSizeListIsSet(boolean value) {
    if (!value) {
      this.sizeList = null;
    }
  }

  public String getColorList() {
    return this.colorList;
  }

  public HPModel setColorList(String colorList) {
    this.colorList = colorList;
    return this;
  }

  public void unsetColorList() {
    this.colorList = null;
  }

  /** Returns true if field colorList is set (has been assigned a value) and false otherwise */
  public boolean isSetColorList() {
    return this.colorList != null;
  }

  public void setColorListIsSet(boolean value) {
    if (!value) {
      this.colorList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HP_NUM:
      if (value == null) {
        unsetHp_num();
      } else {
        setHp_num((String)value);
      }
      break;

    case HP_NAME:
      if (value == null) {
        unsetHpName();
      } else {
        setHpName((String)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((String)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((String)value);
      }
      break;

    case PROXY_PRICE:
      if (value == null) {
        unsetProxyPrice();
      } else {
        setProxyPrice((String)value);
      }
      break;

    case F_PRICE:
      if (value == null) {
        unsetFPrice();
      } else {
        setFPrice((String)value);
      }
      break;

    case S_PRICE:
      if (value == null) {
        unsetSPrice();
      } else {
        setSPrice((String)value);
      }
      break;

    case T_PRICE:
      if (value == null) {
        unsetTPrice();
      } else {
        setTPrice((String)value);
      }
      break;

    case F1_PRICE:
      if (value == null) {
        unsetF1Price();
      } else {
        setF1Price((String)value);
      }
      break;

    case F2_PRICE:
      if (value == null) {
        unsetF2Price();
      } else {
        setF2Price((String)value);
      }
      break;

    case F3_PRICE:
      if (value == null) {
        unsetF3Price();
      } else {
        setF3Price((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case TIME_CATEGORY:
      if (value == null) {
        unsetTimeCategory();
      } else {
        setTimeCategory((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((String)value);
      }
      break;

    case IS_PAN_DIAN:
      if (value == null) {
        unsetIsPanDian();
      } else {
        setIsPanDian((String)value);
      }
      break;

    case KUAN_XING:
      if (value == null) {
        unsetKuanXing();
      } else {
        setKuanXing((String)value);
      }
      break;

    case BAN_XING:
      if (value == null) {
        unsetBanXing();
      } else {
        setBanXing((String)value);
      }
      break;

    case UP_DOWN:
      if (value == null) {
        unsetUpDown();
      } else {
        setUpDown((String)value);
      }
      break;

    case HUO_PAN:
      if (value == null) {
        unsetHuoPan();
      } else {
        setHuoPan((String)value);
      }
      break;

    case CUNHUO_TYPE:
      if (value == null) {
        unsetCunhuo_type();
      } else {
        setCunhuo_type((String)value);
      }
      break;

    case PRICE_SEGMENT:
      if (value == null) {
        unsetPriceSegment();
      } else {
        setPriceSegment((String)value);
      }
      break;

    case PRODUCTION_TYPE:
      if (value == null) {
        unsetProductionType();
      } else {
        setProductionType((String)value);
      }
      break;

    case RELEVENT_METTING:
      if (value == null) {
        unsetReleventMetting();
      } else {
        setReleventMetting((String)value);
      }
      break;

    case METTING_TIME:
      if (value == null) {
        unsetMettingTime();
      } else {
        setMettingTime((String)value);
      }
      break;

    case PRODUCTION_AREA:
      if (value == null) {
        unsetProductionArea();
      } else {
        setProductionArea((String)value);
      }
      break;

    case ENTRY_PERSON:
      if (value == null) {
        unsetEntryPerson();
      } else {
        setEntryPerson((String)value);
      }
      break;

    case ENTRY_TIME:
      if (value == null) {
        unsetEntryTime();
      } else {
        setEntryTime((String)value);
      }
      break;

    case UPDATE_PERSON:
      if (value == null) {
        unsetUpdatePerson();
      } else {
        setUpdatePerson((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case EFFECT_PERSON:
      if (value == null) {
        unsetEffectPerson();
      } else {
        setEffectPerson((String)value);
      }
      break;

    case EFFECT_TIME:
      if (value == null) {
        unsetEffectTime();
      } else {
        setEffectTime((String)value);
      }
      break;

    case FAILURE_PERSON:
      if (value == null) {
        unsetFailurePerson();
      } else {
        setFailurePerson((String)value);
      }
      break;

    case FAILURE_TIME:
      if (value == null) {
        unsetFailureTime();
      } else {
        setFailureTime((String)value);
      }
      break;

    case IMAGE_URL1:
      if (value == null) {
        unsetImageUrl1();
      } else {
        setImageUrl1((String)value);
      }
      break;

    case IMAGE_URL2:
      if (value == null) {
        unsetImageUrl2();
      } else {
        setImageUrl2((String)value);
      }
      break;

    case IMAGE_URL3:
      if (value == null) {
        unsetImageUrl3();
      } else {
        setImageUrl3((String)value);
      }
      break;

    case BRAND_LIST:
      if (value == null) {
        unsetBrandList();
      } else {
        setBrandList((String)value);
      }
      break;

    case CATEGORY_LIST:
      if (value == null) {
        unsetCategoryList();
      } else {
        setCategoryList((String)value);
      }
      break;

    case SIZE_LIST:
      if (value == null) {
        unsetSizeList();
      } else {
        setSizeList((String)value);
      }
      break;

    case COLOR_LIST:
      if (value == null) {
        unsetColorList();
      } else {
        setColorList((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HP_NUM:
      return getHp_num();

    case HP_NAME:
      return getHpName();

    case BRAND:
      return getBrand();

    case CATEGORY:
      return getCategory();

    case SIZE:
      return getSize();

    case COLOR:
      return getColor();

    case PRICE:
      return getPrice();

    case PROXY_PRICE:
      return getProxyPrice();

    case F_PRICE:
      return getFPrice();

    case S_PRICE:
      return getSPrice();

    case T_PRICE:
      return getTPrice();

    case F1_PRICE:
      return getF1Price();

    case F2_PRICE:
      return getF2Price();

    case F3_PRICE:
      return getF3Price();

    case CREATE_TIME:
      return getCreateTime();

    case STATE:
      return getState();

    case TIME_CATEGORY:
      return getTimeCategory();

    case REMARK:
      return getRemark();

    case UNIT:
      return getUnit();

    case IS_PAN_DIAN:
      return getIsPanDian();

    case KUAN_XING:
      return getKuanXing();

    case BAN_XING:
      return getBanXing();

    case UP_DOWN:
      return getUpDown();

    case HUO_PAN:
      return getHuoPan();

    case CUNHUO_TYPE:
      return getCunhuo_type();

    case PRICE_SEGMENT:
      return getPriceSegment();

    case PRODUCTION_TYPE:
      return getProductionType();

    case RELEVENT_METTING:
      return getReleventMetting();

    case METTING_TIME:
      return getMettingTime();

    case PRODUCTION_AREA:
      return getProductionArea();

    case ENTRY_PERSON:
      return getEntryPerson();

    case ENTRY_TIME:
      return getEntryTime();

    case UPDATE_PERSON:
      return getUpdatePerson();

    case UPDATE_TIME:
      return getUpdateTime();

    case EFFECT_PERSON:
      return getEffectPerson();

    case EFFECT_TIME:
      return getEffectTime();

    case FAILURE_PERSON:
      return getFailurePerson();

    case FAILURE_TIME:
      return getFailureTime();

    case IMAGE_URL1:
      return getImageUrl1();

    case IMAGE_URL2:
      return getImageUrl2();

    case IMAGE_URL3:
      return getImageUrl3();

    case BRAND_LIST:
      return getBrandList();

    case CATEGORY_LIST:
      return getCategoryList();

    case SIZE_LIST:
      return getSizeList();

    case COLOR_LIST:
      return getColorList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HP_NUM:
      return isSetHp_num();
    case HP_NAME:
      return isSetHpName();
    case BRAND:
      return isSetBrand();
    case CATEGORY:
      return isSetCategory();
    case SIZE:
      return isSetSize();
    case COLOR:
      return isSetColor();
    case PRICE:
      return isSetPrice();
    case PROXY_PRICE:
      return isSetProxyPrice();
    case F_PRICE:
      return isSetFPrice();
    case S_PRICE:
      return isSetSPrice();
    case T_PRICE:
      return isSetTPrice();
    case F1_PRICE:
      return isSetF1Price();
    case F2_PRICE:
      return isSetF2Price();
    case F3_PRICE:
      return isSetF3Price();
    case CREATE_TIME:
      return isSetCreateTime();
    case STATE:
      return isSetState();
    case TIME_CATEGORY:
      return isSetTimeCategory();
    case REMARK:
      return isSetRemark();
    case UNIT:
      return isSetUnit();
    case IS_PAN_DIAN:
      return isSetIsPanDian();
    case KUAN_XING:
      return isSetKuanXing();
    case BAN_XING:
      return isSetBanXing();
    case UP_DOWN:
      return isSetUpDown();
    case HUO_PAN:
      return isSetHuoPan();
    case CUNHUO_TYPE:
      return isSetCunhuo_type();
    case PRICE_SEGMENT:
      return isSetPriceSegment();
    case PRODUCTION_TYPE:
      return isSetProductionType();
    case RELEVENT_METTING:
      return isSetReleventMetting();
    case METTING_TIME:
      return isSetMettingTime();
    case PRODUCTION_AREA:
      return isSetProductionArea();
    case ENTRY_PERSON:
      return isSetEntryPerson();
    case ENTRY_TIME:
      return isSetEntryTime();
    case UPDATE_PERSON:
      return isSetUpdatePerson();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case EFFECT_PERSON:
      return isSetEffectPerson();
    case EFFECT_TIME:
      return isSetEffectTime();
    case FAILURE_PERSON:
      return isSetFailurePerson();
    case FAILURE_TIME:
      return isSetFailureTime();
    case IMAGE_URL1:
      return isSetImageUrl1();
    case IMAGE_URL2:
      return isSetImageUrl2();
    case IMAGE_URL3:
      return isSetImageUrl3();
    case BRAND_LIST:
      return isSetBrandList();
    case CATEGORY_LIST:
      return isSetCategoryList();
    case SIZE_LIST:
      return isSetSizeList();
    case COLOR_LIST:
      return isSetColorList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HPModel)
      return this.equals((HPModel)that);
    return false;
  }

  public boolean equals(HPModel that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hp_num = true && this.isSetHp_num();
    boolean that_present_hp_num = true && that.isSetHp_num();
    if (this_present_hp_num || that_present_hp_num) {
      if (!(this_present_hp_num && that_present_hp_num))
        return false;
      if (!this.hp_num.equals(that.hp_num))
        return false;
    }

    boolean this_present_hpName = true && this.isSetHpName();
    boolean that_present_hpName = true && that.isSetHpName();
    if (this_present_hpName || that_present_hpName) {
      if (!(this_present_hpName && that_present_hpName))
        return false;
      if (!this.hpName.equals(that.hpName))
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_proxyPrice = true && this.isSetProxyPrice();
    boolean that_present_proxyPrice = true && that.isSetProxyPrice();
    if (this_present_proxyPrice || that_present_proxyPrice) {
      if (!(this_present_proxyPrice && that_present_proxyPrice))
        return false;
      if (!this.proxyPrice.equals(that.proxyPrice))
        return false;
    }

    boolean this_present_fPrice = true && this.isSetFPrice();
    boolean that_present_fPrice = true && that.isSetFPrice();
    if (this_present_fPrice || that_present_fPrice) {
      if (!(this_present_fPrice && that_present_fPrice))
        return false;
      if (!this.fPrice.equals(that.fPrice))
        return false;
    }

    boolean this_present_sPrice = true && this.isSetSPrice();
    boolean that_present_sPrice = true && that.isSetSPrice();
    if (this_present_sPrice || that_present_sPrice) {
      if (!(this_present_sPrice && that_present_sPrice))
        return false;
      if (!this.sPrice.equals(that.sPrice))
        return false;
    }

    boolean this_present_tPrice = true && this.isSetTPrice();
    boolean that_present_tPrice = true && that.isSetTPrice();
    if (this_present_tPrice || that_present_tPrice) {
      if (!(this_present_tPrice && that_present_tPrice))
        return false;
      if (!this.tPrice.equals(that.tPrice))
        return false;
    }

    boolean this_present_f1Price = true && this.isSetF1Price();
    boolean that_present_f1Price = true && that.isSetF1Price();
    if (this_present_f1Price || that_present_f1Price) {
      if (!(this_present_f1Price && that_present_f1Price))
        return false;
      if (!this.f1Price.equals(that.f1Price))
        return false;
    }

    boolean this_present_f2Price = true && this.isSetF2Price();
    boolean that_present_f2Price = true && that.isSetF2Price();
    if (this_present_f2Price || that_present_f2Price) {
      if (!(this_present_f2Price && that_present_f2Price))
        return false;
      if (!this.f2Price.equals(that.f2Price))
        return false;
    }

    boolean this_present_f3Price = true && this.isSetF3Price();
    boolean that_present_f3Price = true && that.isSetF3Price();
    if (this_present_f3Price || that_present_f3Price) {
      if (!(this_present_f3Price && that_present_f3Price))
        return false;
      if (!this.f3Price.equals(that.f3Price))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_timeCategory = true && this.isSetTimeCategory();
    boolean that_present_timeCategory = true && that.isSetTimeCategory();
    if (this_present_timeCategory || that_present_timeCategory) {
      if (!(this_present_timeCategory && that_present_timeCategory))
        return false;
      if (!this.timeCategory.equals(that.timeCategory))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_isPanDian = true && this.isSetIsPanDian();
    boolean that_present_isPanDian = true && that.isSetIsPanDian();
    if (this_present_isPanDian || that_present_isPanDian) {
      if (!(this_present_isPanDian && that_present_isPanDian))
        return false;
      if (!this.isPanDian.equals(that.isPanDian))
        return false;
    }

    boolean this_present_kuanXing = true && this.isSetKuanXing();
    boolean that_present_kuanXing = true && that.isSetKuanXing();
    if (this_present_kuanXing || that_present_kuanXing) {
      if (!(this_present_kuanXing && that_present_kuanXing))
        return false;
      if (!this.kuanXing.equals(that.kuanXing))
        return false;
    }

    boolean this_present_banXing = true && this.isSetBanXing();
    boolean that_present_banXing = true && that.isSetBanXing();
    if (this_present_banXing || that_present_banXing) {
      if (!(this_present_banXing && that_present_banXing))
        return false;
      if (!this.banXing.equals(that.banXing))
        return false;
    }

    boolean this_present_upDown = true && this.isSetUpDown();
    boolean that_present_upDown = true && that.isSetUpDown();
    if (this_present_upDown || that_present_upDown) {
      if (!(this_present_upDown && that_present_upDown))
        return false;
      if (!this.upDown.equals(that.upDown))
        return false;
    }

    boolean this_present_huoPan = true && this.isSetHuoPan();
    boolean that_present_huoPan = true && that.isSetHuoPan();
    if (this_present_huoPan || that_present_huoPan) {
      if (!(this_present_huoPan && that_present_huoPan))
        return false;
      if (!this.huoPan.equals(that.huoPan))
        return false;
    }

    boolean this_present_cunhuo_type = true && this.isSetCunhuo_type();
    boolean that_present_cunhuo_type = true && that.isSetCunhuo_type();
    if (this_present_cunhuo_type || that_present_cunhuo_type) {
      if (!(this_present_cunhuo_type && that_present_cunhuo_type))
        return false;
      if (!this.cunhuo_type.equals(that.cunhuo_type))
        return false;
    }

    boolean this_present_priceSegment = true && this.isSetPriceSegment();
    boolean that_present_priceSegment = true && that.isSetPriceSegment();
    if (this_present_priceSegment || that_present_priceSegment) {
      if (!(this_present_priceSegment && that_present_priceSegment))
        return false;
      if (!this.priceSegment.equals(that.priceSegment))
        return false;
    }

    boolean this_present_productionType = true && this.isSetProductionType();
    boolean that_present_productionType = true && that.isSetProductionType();
    if (this_present_productionType || that_present_productionType) {
      if (!(this_present_productionType && that_present_productionType))
        return false;
      if (!this.productionType.equals(that.productionType))
        return false;
    }

    boolean this_present_releventMetting = true && this.isSetReleventMetting();
    boolean that_present_releventMetting = true && that.isSetReleventMetting();
    if (this_present_releventMetting || that_present_releventMetting) {
      if (!(this_present_releventMetting && that_present_releventMetting))
        return false;
      if (!this.releventMetting.equals(that.releventMetting))
        return false;
    }

    boolean this_present_mettingTime = true && this.isSetMettingTime();
    boolean that_present_mettingTime = true && that.isSetMettingTime();
    if (this_present_mettingTime || that_present_mettingTime) {
      if (!(this_present_mettingTime && that_present_mettingTime))
        return false;
      if (!this.mettingTime.equals(that.mettingTime))
        return false;
    }

    boolean this_present_productionArea = true && this.isSetProductionArea();
    boolean that_present_productionArea = true && that.isSetProductionArea();
    if (this_present_productionArea || that_present_productionArea) {
      if (!(this_present_productionArea && that_present_productionArea))
        return false;
      if (!this.productionArea.equals(that.productionArea))
        return false;
    }

    boolean this_present_entryPerson = true && this.isSetEntryPerson();
    boolean that_present_entryPerson = true && that.isSetEntryPerson();
    if (this_present_entryPerson || that_present_entryPerson) {
      if (!(this_present_entryPerson && that_present_entryPerson))
        return false;
      if (!this.entryPerson.equals(that.entryPerson))
        return false;
    }

    boolean this_present_entryTime = true && this.isSetEntryTime();
    boolean that_present_entryTime = true && that.isSetEntryTime();
    if (this_present_entryTime || that_present_entryTime) {
      if (!(this_present_entryTime && that_present_entryTime))
        return false;
      if (!this.entryTime.equals(that.entryTime))
        return false;
    }

    boolean this_present_updatePerson = true && this.isSetUpdatePerson();
    boolean that_present_updatePerson = true && that.isSetUpdatePerson();
    if (this_present_updatePerson || that_present_updatePerson) {
      if (!(this_present_updatePerson && that_present_updatePerson))
        return false;
      if (!this.updatePerson.equals(that.updatePerson))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_effectPerson = true && this.isSetEffectPerson();
    boolean that_present_effectPerson = true && that.isSetEffectPerson();
    if (this_present_effectPerson || that_present_effectPerson) {
      if (!(this_present_effectPerson && that_present_effectPerson))
        return false;
      if (!this.effectPerson.equals(that.effectPerson))
        return false;
    }

    boolean this_present_effectTime = true && this.isSetEffectTime();
    boolean that_present_effectTime = true && that.isSetEffectTime();
    if (this_present_effectTime || that_present_effectTime) {
      if (!(this_present_effectTime && that_present_effectTime))
        return false;
      if (!this.effectTime.equals(that.effectTime))
        return false;
    }

    boolean this_present_failurePerson = true && this.isSetFailurePerson();
    boolean that_present_failurePerson = true && that.isSetFailurePerson();
    if (this_present_failurePerson || that_present_failurePerson) {
      if (!(this_present_failurePerson && that_present_failurePerson))
        return false;
      if (!this.failurePerson.equals(that.failurePerson))
        return false;
    }

    boolean this_present_failureTime = true && this.isSetFailureTime();
    boolean that_present_failureTime = true && that.isSetFailureTime();
    if (this_present_failureTime || that_present_failureTime) {
      if (!(this_present_failureTime && that_present_failureTime))
        return false;
      if (!this.failureTime.equals(that.failureTime))
        return false;
    }

    boolean this_present_imageUrl1 = true && this.isSetImageUrl1();
    boolean that_present_imageUrl1 = true && that.isSetImageUrl1();
    if (this_present_imageUrl1 || that_present_imageUrl1) {
      if (!(this_present_imageUrl1 && that_present_imageUrl1))
        return false;
      if (!this.imageUrl1.equals(that.imageUrl1))
        return false;
    }

    boolean this_present_imageUrl2 = true && this.isSetImageUrl2();
    boolean that_present_imageUrl2 = true && that.isSetImageUrl2();
    if (this_present_imageUrl2 || that_present_imageUrl2) {
      if (!(this_present_imageUrl2 && that_present_imageUrl2))
        return false;
      if (!this.imageUrl2.equals(that.imageUrl2))
        return false;
    }

    boolean this_present_imageUrl3 = true && this.isSetImageUrl3();
    boolean that_present_imageUrl3 = true && that.isSetImageUrl3();
    if (this_present_imageUrl3 || that_present_imageUrl3) {
      if (!(this_present_imageUrl3 && that_present_imageUrl3))
        return false;
      if (!this.imageUrl3.equals(that.imageUrl3))
        return false;
    }

    boolean this_present_brandList = true && this.isSetBrandList();
    boolean that_present_brandList = true && that.isSetBrandList();
    if (this_present_brandList || that_present_brandList) {
      if (!(this_present_brandList && that_present_brandList))
        return false;
      if (!this.brandList.equals(that.brandList))
        return false;
    }

    boolean this_present_categoryList = true && this.isSetCategoryList();
    boolean that_present_categoryList = true && that.isSetCategoryList();
    if (this_present_categoryList || that_present_categoryList) {
      if (!(this_present_categoryList && that_present_categoryList))
        return false;
      if (!this.categoryList.equals(that.categoryList))
        return false;
    }

    boolean this_present_sizeList = true && this.isSetSizeList();
    boolean that_present_sizeList = true && that.isSetSizeList();
    if (this_present_sizeList || that_present_sizeList) {
      if (!(this_present_sizeList && that_present_sizeList))
        return false;
      if (!this.sizeList.equals(that.sizeList))
        return false;
    }

    boolean this_present_colorList = true && this.isSetColorList();
    boolean that_present_colorList = true && that.isSetColorList();
    if (this_present_colorList || that_present_colorList) {
      if (!(this_present_colorList && that_present_colorList))
        return false;
      if (!this.colorList.equals(that.colorList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_hp_num = true && (isSetHp_num());
    list.add(present_hp_num);
    if (present_hp_num)
      list.add(hp_num);

    boolean present_hpName = true && (isSetHpName());
    list.add(present_hpName);
    if (present_hpName)
      list.add(hpName);

    boolean present_brand = true && (isSetBrand());
    list.add(present_brand);
    if (present_brand)
      list.add(brand);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_size = true && (isSetSize());
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_color = true && (isSetColor());
    list.add(present_color);
    if (present_color)
      list.add(color);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_proxyPrice = true && (isSetProxyPrice());
    list.add(present_proxyPrice);
    if (present_proxyPrice)
      list.add(proxyPrice);

    boolean present_fPrice = true && (isSetFPrice());
    list.add(present_fPrice);
    if (present_fPrice)
      list.add(fPrice);

    boolean present_sPrice = true && (isSetSPrice());
    list.add(present_sPrice);
    if (present_sPrice)
      list.add(sPrice);

    boolean present_tPrice = true && (isSetTPrice());
    list.add(present_tPrice);
    if (present_tPrice)
      list.add(tPrice);

    boolean present_f1Price = true && (isSetF1Price());
    list.add(present_f1Price);
    if (present_f1Price)
      list.add(f1Price);

    boolean present_f2Price = true && (isSetF2Price());
    list.add(present_f2Price);
    if (present_f2Price)
      list.add(f2Price);

    boolean present_f3Price = true && (isSetF3Price());
    list.add(present_f3Price);
    if (present_f3Price)
      list.add(f3Price);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_timeCategory = true && (isSetTimeCategory());
    list.add(present_timeCategory);
    if (present_timeCategory)
      list.add(timeCategory);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_unit = true && (isSetUnit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    boolean present_isPanDian = true && (isSetIsPanDian());
    list.add(present_isPanDian);
    if (present_isPanDian)
      list.add(isPanDian);

    boolean present_kuanXing = true && (isSetKuanXing());
    list.add(present_kuanXing);
    if (present_kuanXing)
      list.add(kuanXing);

    boolean present_banXing = true && (isSetBanXing());
    list.add(present_banXing);
    if (present_banXing)
      list.add(banXing);

    boolean present_upDown = true && (isSetUpDown());
    list.add(present_upDown);
    if (present_upDown)
      list.add(upDown);

    boolean present_huoPan = true && (isSetHuoPan());
    list.add(present_huoPan);
    if (present_huoPan)
      list.add(huoPan);

    boolean present_cunhuo_type = true && (isSetCunhuo_type());
    list.add(present_cunhuo_type);
    if (present_cunhuo_type)
      list.add(cunhuo_type);

    boolean present_priceSegment = true && (isSetPriceSegment());
    list.add(present_priceSegment);
    if (present_priceSegment)
      list.add(priceSegment);

    boolean present_productionType = true && (isSetProductionType());
    list.add(present_productionType);
    if (present_productionType)
      list.add(productionType);

    boolean present_releventMetting = true && (isSetReleventMetting());
    list.add(present_releventMetting);
    if (present_releventMetting)
      list.add(releventMetting);

    boolean present_mettingTime = true && (isSetMettingTime());
    list.add(present_mettingTime);
    if (present_mettingTime)
      list.add(mettingTime);

    boolean present_productionArea = true && (isSetProductionArea());
    list.add(present_productionArea);
    if (present_productionArea)
      list.add(productionArea);

    boolean present_entryPerson = true && (isSetEntryPerson());
    list.add(present_entryPerson);
    if (present_entryPerson)
      list.add(entryPerson);

    boolean present_entryTime = true && (isSetEntryTime());
    list.add(present_entryTime);
    if (present_entryTime)
      list.add(entryTime);

    boolean present_updatePerson = true && (isSetUpdatePerson());
    list.add(present_updatePerson);
    if (present_updatePerson)
      list.add(updatePerson);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_effectPerson = true && (isSetEffectPerson());
    list.add(present_effectPerson);
    if (present_effectPerson)
      list.add(effectPerson);

    boolean present_effectTime = true && (isSetEffectTime());
    list.add(present_effectTime);
    if (present_effectTime)
      list.add(effectTime);

    boolean present_failurePerson = true && (isSetFailurePerson());
    list.add(present_failurePerson);
    if (present_failurePerson)
      list.add(failurePerson);

    boolean present_failureTime = true && (isSetFailureTime());
    list.add(present_failureTime);
    if (present_failureTime)
      list.add(failureTime);

    boolean present_imageUrl1 = true && (isSetImageUrl1());
    list.add(present_imageUrl1);
    if (present_imageUrl1)
      list.add(imageUrl1);

    boolean present_imageUrl2 = true && (isSetImageUrl2());
    list.add(present_imageUrl2);
    if (present_imageUrl2)
      list.add(imageUrl2);

    boolean present_imageUrl3 = true && (isSetImageUrl3());
    list.add(present_imageUrl3);
    if (present_imageUrl3)
      list.add(imageUrl3);

    boolean present_brandList = true && (isSetBrandList());
    list.add(present_brandList);
    if (present_brandList)
      list.add(brandList);

    boolean present_categoryList = true && (isSetCategoryList());
    list.add(present_categoryList);
    if (present_categoryList)
      list.add(categoryList);

    boolean present_sizeList = true && (isSetSizeList());
    list.add(present_sizeList);
    if (present_sizeList)
      list.add(sizeList);

    boolean present_colorList = true && (isSetColorList());
    list.add(present_colorList);
    if (present_colorList)
      list.add(colorList);

    return list.hashCode();
  }

  @Override
  public int compareTo(HPModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHp_num()).compareTo(other.isSetHp_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHp_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hp_num, other.hp_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHpName()).compareTo(other.isSetHpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hpName, other.hpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxyPrice()).compareTo(other.isSetProxyPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyPrice, other.proxyPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFPrice()).compareTo(other.isSetFPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fPrice, other.fPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSPrice()).compareTo(other.isSetSPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sPrice, other.sPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTPrice()).compareTo(other.isSetTPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tPrice, other.tPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF1Price()).compareTo(other.isSetF1Price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF1Price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f1Price, other.f1Price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF2Price()).compareTo(other.isSetF2Price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2Price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2Price, other.f2Price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF3Price()).compareTo(other.isSetF3Price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF3Price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f3Price, other.f3Price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCategory()).compareTo(other.isSetTimeCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCategory, other.timeCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPanDian()).compareTo(other.isSetIsPanDian());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPanDian()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPanDian, other.isPanDian);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKuanXing()).compareTo(other.isSetKuanXing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKuanXing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kuanXing, other.kuanXing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBanXing()).compareTo(other.isSetBanXing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanXing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banXing, other.banXing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpDown()).compareTo(other.isSetUpDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upDown, other.upDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHuoPan()).compareTo(other.isSetHuoPan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHuoPan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.huoPan, other.huoPan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCunhuo_type()).compareTo(other.isSetCunhuo_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCunhuo_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cunhuo_type, other.cunhuo_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceSegment()).compareTo(other.isSetPriceSegment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceSegment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceSegment, other.priceSegment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductionType()).compareTo(other.isSetProductionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productionType, other.productionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleventMetting()).compareTo(other.isSetReleventMetting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleventMetting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releventMetting, other.releventMetting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMettingTime()).compareTo(other.isSetMettingTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMettingTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mettingTime, other.mettingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductionArea()).compareTo(other.isSetProductionArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductionArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productionArea, other.productionArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryPerson()).compareTo(other.isSetEntryPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPerson, other.entryPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryTime()).compareTo(other.isSetEntryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryTime, other.entryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatePerson()).compareTo(other.isSetUpdatePerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatePerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatePerson, other.updatePerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectPerson()).compareTo(other.isSetEffectPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectPerson, other.effectPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectTime()).compareTo(other.isSetEffectTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectTime, other.effectTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailurePerson()).compareTo(other.isSetFailurePerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailurePerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failurePerson, other.failurePerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureTime()).compareTo(other.isSetFailureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureTime, other.failureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl1()).compareTo(other.isSetImageUrl1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl1, other.imageUrl1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl2()).compareTo(other.isSetImageUrl2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl2, other.imageUrl2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl3()).compareTo(other.isSetImageUrl3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl3, other.imageUrl3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandList()).compareTo(other.isSetBrandList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandList, other.brandList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryList()).compareTo(other.isSetCategoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryList, other.categoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeList()).compareTo(other.isSetSizeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeList, other.sizeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColorList()).compareTo(other.isSetColorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colorList, other.colorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HPModel(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hp_num:");
    if (this.hp_num == null) {
      sb.append("null");
    } else {
      sb.append(this.hp_num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hpName:");
    if (this.hpName == null) {
      sb.append("null");
    } else {
      sb.append(this.hpName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand:");
    if (this.brand == null) {
      sb.append("null");
    } else {
      sb.append(this.brand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    if (this.size == null) {
      sb.append("null");
    } else {
      sb.append(this.size);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("color:");
    if (this.color == null) {
      sb.append("null");
    } else {
      sb.append(this.color);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (isSetProxyPrice()) {
      if (!first) sb.append(", ");
      sb.append("proxyPrice:");
      if (this.proxyPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.proxyPrice);
      }
      first = false;
    }
    if (isSetFPrice()) {
      if (!first) sb.append(", ");
      sb.append("fPrice:");
      if (this.fPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.fPrice);
      }
      first = false;
    }
    if (isSetSPrice()) {
      if (!first) sb.append(", ");
      sb.append("sPrice:");
      if (this.sPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.sPrice);
      }
      first = false;
    }
    if (isSetTPrice()) {
      if (!first) sb.append(", ");
      sb.append("tPrice:");
      if (this.tPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.tPrice);
      }
      first = false;
    }
    if (isSetF1Price()) {
      if (!first) sb.append(", ");
      sb.append("f1Price:");
      if (this.f1Price == null) {
        sb.append("null");
      } else {
        sb.append(this.f1Price);
      }
      first = false;
    }
    if (isSetF2Price()) {
      if (!first) sb.append(", ");
      sb.append("f2Price:");
      if (this.f2Price == null) {
        sb.append("null");
      } else {
        sb.append(this.f2Price);
      }
      first = false;
    }
    if (isSetF3Price()) {
      if (!first) sb.append(", ");
      sb.append("f3Price:");
      if (this.f3Price == null) {
        sb.append("null");
      } else {
        sb.append(this.f3Price);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetTimeCategory()) {
      if (!first) sb.append(", ");
      sb.append("timeCategory:");
      if (this.timeCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.timeCategory);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetUnit()) {
      if (!first) sb.append(", ");
      sb.append("unit:");
      if (this.unit == null) {
        sb.append("null");
      } else {
        sb.append(this.unit);
      }
      first = false;
    }
    if (isSetIsPanDian()) {
      if (!first) sb.append(", ");
      sb.append("isPanDian:");
      if (this.isPanDian == null) {
        sb.append("null");
      } else {
        sb.append(this.isPanDian);
      }
      first = false;
    }
    if (isSetKuanXing()) {
      if (!first) sb.append(", ");
      sb.append("kuanXing:");
      if (this.kuanXing == null) {
        sb.append("null");
      } else {
        sb.append(this.kuanXing);
      }
      first = false;
    }
    if (isSetBanXing()) {
      if (!first) sb.append(", ");
      sb.append("banXing:");
      if (this.banXing == null) {
        sb.append("null");
      } else {
        sb.append(this.banXing);
      }
      first = false;
    }
    if (isSetUpDown()) {
      if (!first) sb.append(", ");
      sb.append("upDown:");
      if (this.upDown == null) {
        sb.append("null");
      } else {
        sb.append(this.upDown);
      }
      first = false;
    }
    if (isSetHuoPan()) {
      if (!first) sb.append(", ");
      sb.append("huoPan:");
      if (this.huoPan == null) {
        sb.append("null");
      } else {
        sb.append(this.huoPan);
      }
      first = false;
    }
    if (isSetCunhuo_type()) {
      if (!first) sb.append(", ");
      sb.append("cunhuo_type:");
      if (this.cunhuo_type == null) {
        sb.append("null");
      } else {
        sb.append(this.cunhuo_type);
      }
      first = false;
    }
    if (isSetPriceSegment()) {
      if (!first) sb.append(", ");
      sb.append("priceSegment:");
      if (this.priceSegment == null) {
        sb.append("null");
      } else {
        sb.append(this.priceSegment);
      }
      first = false;
    }
    if (isSetProductionType()) {
      if (!first) sb.append(", ");
      sb.append("productionType:");
      if (this.productionType == null) {
        sb.append("null");
      } else {
        sb.append(this.productionType);
      }
      first = false;
    }
    if (isSetReleventMetting()) {
      if (!first) sb.append(", ");
      sb.append("releventMetting:");
      if (this.releventMetting == null) {
        sb.append("null");
      } else {
        sb.append(this.releventMetting);
      }
      first = false;
    }
    if (isSetMettingTime()) {
      if (!first) sb.append(", ");
      sb.append("mettingTime:");
      if (this.mettingTime == null) {
        sb.append("null");
      } else {
        sb.append(this.mettingTime);
      }
      first = false;
    }
    if (isSetProductionArea()) {
      if (!first) sb.append(", ");
      sb.append("productionArea:");
      if (this.productionArea == null) {
        sb.append("null");
      } else {
        sb.append(this.productionArea);
      }
      first = false;
    }
    if (isSetEntryPerson()) {
      if (!first) sb.append(", ");
      sb.append("entryPerson:");
      if (this.entryPerson == null) {
        sb.append("null");
      } else {
        sb.append(this.entryPerson);
      }
      first = false;
    }
    if (isSetEntryTime()) {
      if (!first) sb.append(", ");
      sb.append("entryTime:");
      if (this.entryTime == null) {
        sb.append("null");
      } else {
        sb.append(this.entryTime);
      }
      first = false;
    }
    if (isSetUpdatePerson()) {
      if (!first) sb.append(", ");
      sb.append("updatePerson:");
      if (this.updatePerson == null) {
        sb.append("null");
      } else {
        sb.append(this.updatePerson);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetEffectPerson()) {
      if (!first) sb.append(", ");
      sb.append("effectPerson:");
      if (this.effectPerson == null) {
        sb.append("null");
      } else {
        sb.append(this.effectPerson);
      }
      first = false;
    }
    if (isSetEffectTime()) {
      if (!first) sb.append(", ");
      sb.append("effectTime:");
      if (this.effectTime == null) {
        sb.append("null");
      } else {
        sb.append(this.effectTime);
      }
      first = false;
    }
    if (isSetFailurePerson()) {
      if (!first) sb.append(", ");
      sb.append("failurePerson:");
      if (this.failurePerson == null) {
        sb.append("null");
      } else {
        sb.append(this.failurePerson);
      }
      first = false;
    }
    if (isSetFailureTime()) {
      if (!first) sb.append(", ");
      sb.append("failureTime:");
      if (this.failureTime == null) {
        sb.append("null");
      } else {
        sb.append(this.failureTime);
      }
      first = false;
    }
    if (isSetImageUrl1()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl1:");
      if (this.imageUrl1 == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl1);
      }
      first = false;
    }
    if (isSetImageUrl2()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl2:");
      if (this.imageUrl2 == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl2);
      }
      first = false;
    }
    if (isSetImageUrl3()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl3:");
      if (this.imageUrl3 == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl3);
      }
      first = false;
    }
    if (isSetBrandList()) {
      if (!first) sb.append(", ");
      sb.append("brandList:");
      if (this.brandList == null) {
        sb.append("null");
      } else {
        sb.append(this.brandList);
      }
      first = false;
    }
    if (isSetCategoryList()) {
      if (!first) sb.append(", ");
      sb.append("categoryList:");
      if (this.categoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryList);
      }
      first = false;
    }
    if (isSetSizeList()) {
      if (!first) sb.append(", ");
      sb.append("sizeList:");
      if (this.sizeList == null) {
        sb.append("null");
      } else {
        sb.append(this.sizeList);
      }
      first = false;
    }
    if (isSetColorList()) {
      if (!first) sb.append(", ");
      sb.append("colorList:");
      if (this.colorList == null) {
        sb.append("null");
      } else {
        sb.append(this.colorList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hp_num == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hp_num' was not present! Struct: " + toString());
    }
    if (hpName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hpName' was not present! Struct: " + toString());
    }
    if (brand == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'brand' was not present! Struct: " + toString());
    }
    if (category == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'category' was not present! Struct: " + toString());
    }
    if (size == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not present! Struct: " + toString());
    }
    if (color == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'color' was not present! Struct: " + toString());
    }
    if (price == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HPModelStandardSchemeFactory implements SchemeFactory {
    public HPModelStandardScheme getScheme() {
      return new HPModelStandardScheme();
    }
  }

  private static class HPModelStandardScheme extends StandardScheme<HPModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HPModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HP_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hp_num = iprot.readString();
              struct.setHp_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hpName = iprot.readString();
              struct.setHpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand = iprot.readString();
              struct.setBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.size = iprot.readString();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.color = iprot.readString();
              struct.setColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROXY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proxyPrice = iprot.readString();
              struct.setProxyPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // F_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fPrice = iprot.readString();
              struct.setFPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // S_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sPrice = iprot.readString();
              struct.setSPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // T_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tPrice = iprot.readString();
              struct.setTPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // F1_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.f1Price = iprot.readString();
              struct.setF1PriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // F2_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.f2Price = iprot.readString();
              struct.setF2PriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // F3_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.f3Price = iprot.readString();
              struct.setF3PriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TIME_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeCategory = iprot.readString();
              struct.setTimeCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_PAN_DIAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isPanDian = iprot.readString();
              struct.setIsPanDianIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // KUAN_XING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kuanXing = iprot.readString();
              struct.setKuanXingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BAN_XING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.banXing = iprot.readString();
              struct.setBanXingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UP_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.upDown = iprot.readString();
              struct.setUpDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // HUO_PAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.huoPan = iprot.readString();
              struct.setHuoPanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CUNHUO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cunhuo_type = iprot.readString();
              struct.setCunhuo_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PRICE_SEGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priceSegment = iprot.readString();
              struct.setPriceSegmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PRODUCTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productionType = iprot.readString();
              struct.setProductionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RELEVENT_METTING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releventMetting = iprot.readString();
              struct.setReleventMettingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // METTING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mettingTime = iprot.readString();
              struct.setMettingTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PRODUCTION_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productionArea = iprot.readString();
              struct.setProductionAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ENTRY_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryPerson = iprot.readString();
              struct.setEntryPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ENTRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryTime = iprot.readString();
              struct.setEntryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // UPDATE_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatePerson = iprot.readString();
              struct.setUpdatePersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // EFFECT_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effectPerson = iprot.readString();
              struct.setEffectPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // EFFECT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effectTime = iprot.readString();
              struct.setEffectTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // FAILURE_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failurePerson = iprot.readString();
              struct.setFailurePersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // FAILURE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failureTime = iprot.readString();
              struct.setFailureTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // IMAGE_URL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl1 = iprot.readString();
              struct.setImageUrl1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // IMAGE_URL2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl2 = iprot.readString();
              struct.setImageUrl2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // IMAGE_URL3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl3 = iprot.readString();
              struct.setImageUrl3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // BRAND_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandList = iprot.readString();
              struct.setBrandListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CATEGORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryList = iprot.readString();
              struct.setCategoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // SIZE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sizeList = iprot.readString();
              struct.setSizeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // COLOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colorList = iprot.readString();
              struct.setColorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HPModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.hp_num != null) {
        oprot.writeFieldBegin(HP_NUM_FIELD_DESC);
        oprot.writeString(struct.hp_num);
        oprot.writeFieldEnd();
      }
      if (struct.hpName != null) {
        oprot.writeFieldBegin(HP_NAME_FIELD_DESC);
        oprot.writeString(struct.hpName);
        oprot.writeFieldEnd();
      }
      if (struct.brand != null) {
        oprot.writeFieldBegin(BRAND_FIELD_DESC);
        oprot.writeString(struct.brand);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.size != null) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeString(struct.size);
        oprot.writeFieldEnd();
      }
      if (struct.color != null) {
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeString(struct.color);
        oprot.writeFieldEnd();
      }
      if (struct.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.proxyPrice != null) {
        if (struct.isSetProxyPrice()) {
          oprot.writeFieldBegin(PROXY_PRICE_FIELD_DESC);
          oprot.writeString(struct.proxyPrice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fPrice != null) {
        if (struct.isSetFPrice()) {
          oprot.writeFieldBegin(F_PRICE_FIELD_DESC);
          oprot.writeString(struct.fPrice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sPrice != null) {
        if (struct.isSetSPrice()) {
          oprot.writeFieldBegin(S_PRICE_FIELD_DESC);
          oprot.writeString(struct.sPrice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tPrice != null) {
        if (struct.isSetTPrice()) {
          oprot.writeFieldBegin(T_PRICE_FIELD_DESC);
          oprot.writeString(struct.tPrice);
          oprot.writeFieldEnd();
        }
      }
      if (struct.f1Price != null) {
        if (struct.isSetF1Price()) {
          oprot.writeFieldBegin(F1_PRICE_FIELD_DESC);
          oprot.writeString(struct.f1Price);
          oprot.writeFieldEnd();
        }
      }
      if (struct.f2Price != null) {
        if (struct.isSetF2Price()) {
          oprot.writeFieldBegin(F2_PRICE_FIELD_DESC);
          oprot.writeString(struct.f2Price);
          oprot.writeFieldEnd();
        }
      }
      if (struct.f3Price != null) {
        if (struct.isSetF3Price()) {
          oprot.writeFieldBegin(F3_PRICE_FIELD_DESC);
          oprot.writeString(struct.f3Price);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeCategory != null) {
        if (struct.isSetTimeCategory()) {
          oprot.writeFieldBegin(TIME_CATEGORY_FIELD_DESC);
          oprot.writeString(struct.timeCategory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unit != null) {
        if (struct.isSetUnit()) {
          oprot.writeFieldBegin(UNIT_FIELD_DESC);
          oprot.writeString(struct.unit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isPanDian != null) {
        if (struct.isSetIsPanDian()) {
          oprot.writeFieldBegin(IS_PAN_DIAN_FIELD_DESC);
          oprot.writeString(struct.isPanDian);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kuanXing != null) {
        if (struct.isSetKuanXing()) {
          oprot.writeFieldBegin(KUAN_XING_FIELD_DESC);
          oprot.writeString(struct.kuanXing);
          oprot.writeFieldEnd();
        }
      }
      if (struct.banXing != null) {
        if (struct.isSetBanXing()) {
          oprot.writeFieldBegin(BAN_XING_FIELD_DESC);
          oprot.writeString(struct.banXing);
          oprot.writeFieldEnd();
        }
      }
      if (struct.upDown != null) {
        if (struct.isSetUpDown()) {
          oprot.writeFieldBegin(UP_DOWN_FIELD_DESC);
          oprot.writeString(struct.upDown);
          oprot.writeFieldEnd();
        }
      }
      if (struct.huoPan != null) {
        if (struct.isSetHuoPan()) {
          oprot.writeFieldBegin(HUO_PAN_FIELD_DESC);
          oprot.writeString(struct.huoPan);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cunhuo_type != null) {
        if (struct.isSetCunhuo_type()) {
          oprot.writeFieldBegin(CUNHUO_TYPE_FIELD_DESC);
          oprot.writeString(struct.cunhuo_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priceSegment != null) {
        if (struct.isSetPriceSegment()) {
          oprot.writeFieldBegin(PRICE_SEGMENT_FIELD_DESC);
          oprot.writeString(struct.priceSegment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productionType != null) {
        if (struct.isSetProductionType()) {
          oprot.writeFieldBegin(PRODUCTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.productionType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.releventMetting != null) {
        if (struct.isSetReleventMetting()) {
          oprot.writeFieldBegin(RELEVENT_METTING_FIELD_DESC);
          oprot.writeString(struct.releventMetting);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mettingTime != null) {
        if (struct.isSetMettingTime()) {
          oprot.writeFieldBegin(METTING_TIME_FIELD_DESC);
          oprot.writeString(struct.mettingTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productionArea != null) {
        if (struct.isSetProductionArea()) {
          oprot.writeFieldBegin(PRODUCTION_AREA_FIELD_DESC);
          oprot.writeString(struct.productionArea);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entryPerson != null) {
        if (struct.isSetEntryPerson()) {
          oprot.writeFieldBegin(ENTRY_PERSON_FIELD_DESC);
          oprot.writeString(struct.entryPerson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entryTime != null) {
        if (struct.isSetEntryTime()) {
          oprot.writeFieldBegin(ENTRY_TIME_FIELD_DESC);
          oprot.writeString(struct.entryTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatePerson != null) {
        if (struct.isSetUpdatePerson()) {
          oprot.writeFieldBegin(UPDATE_PERSON_FIELD_DESC);
          oprot.writeString(struct.updatePerson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.effectPerson != null) {
        if (struct.isSetEffectPerson()) {
          oprot.writeFieldBegin(EFFECT_PERSON_FIELD_DESC);
          oprot.writeString(struct.effectPerson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.effectTime != null) {
        if (struct.isSetEffectTime()) {
          oprot.writeFieldBegin(EFFECT_TIME_FIELD_DESC);
          oprot.writeString(struct.effectTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.failurePerson != null) {
        if (struct.isSetFailurePerson()) {
          oprot.writeFieldBegin(FAILURE_PERSON_FIELD_DESC);
          oprot.writeString(struct.failurePerson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.failureTime != null) {
        if (struct.isSetFailureTime()) {
          oprot.writeFieldBegin(FAILURE_TIME_FIELD_DESC);
          oprot.writeString(struct.failureTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl1 != null) {
        if (struct.isSetImageUrl1()) {
          oprot.writeFieldBegin(IMAGE_URL1_FIELD_DESC);
          oprot.writeString(struct.imageUrl1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl2 != null) {
        if (struct.isSetImageUrl2()) {
          oprot.writeFieldBegin(IMAGE_URL2_FIELD_DESC);
          oprot.writeString(struct.imageUrl2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl3 != null) {
        if (struct.isSetImageUrl3()) {
          oprot.writeFieldBegin(IMAGE_URL3_FIELD_DESC);
          oprot.writeString(struct.imageUrl3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brandList != null) {
        if (struct.isSetBrandList()) {
          oprot.writeFieldBegin(BRAND_LIST_FIELD_DESC);
          oprot.writeString(struct.brandList);
          oprot.writeFieldEnd();
        }
      }
      if (struct.categoryList != null) {
        if (struct.isSetCategoryList()) {
          oprot.writeFieldBegin(CATEGORY_LIST_FIELD_DESC);
          oprot.writeString(struct.categoryList);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sizeList != null) {
        if (struct.isSetSizeList()) {
          oprot.writeFieldBegin(SIZE_LIST_FIELD_DESC);
          oprot.writeString(struct.sizeList);
          oprot.writeFieldEnd();
        }
      }
      if (struct.colorList != null) {
        if (struct.isSetColorList()) {
          oprot.writeFieldBegin(COLOR_LIST_FIELD_DESC);
          oprot.writeString(struct.colorList);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HPModelTupleSchemeFactory implements SchemeFactory {
    public HPModelTupleScheme getScheme() {
      return new HPModelTupleScheme();
    }
  }

  private static class HPModelTupleScheme extends TupleScheme<HPModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HPModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.hp_num);
      oprot.writeString(struct.hpName);
      oprot.writeString(struct.brand);
      oprot.writeString(struct.category);
      oprot.writeString(struct.size);
      oprot.writeString(struct.color);
      oprot.writeString(struct.price);
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProxyPrice()) {
        optionals.set(1);
      }
      if (struct.isSetFPrice()) {
        optionals.set(2);
      }
      if (struct.isSetSPrice()) {
        optionals.set(3);
      }
      if (struct.isSetTPrice()) {
        optionals.set(4);
      }
      if (struct.isSetF1Price()) {
        optionals.set(5);
      }
      if (struct.isSetF2Price()) {
        optionals.set(6);
      }
      if (struct.isSetF3Price()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetState()) {
        optionals.set(9);
      }
      if (struct.isSetTimeCategory()) {
        optionals.set(10);
      }
      if (struct.isSetRemark()) {
        optionals.set(11);
      }
      if (struct.isSetUnit()) {
        optionals.set(12);
      }
      if (struct.isSetIsPanDian()) {
        optionals.set(13);
      }
      if (struct.isSetKuanXing()) {
        optionals.set(14);
      }
      if (struct.isSetBanXing()) {
        optionals.set(15);
      }
      if (struct.isSetUpDown()) {
        optionals.set(16);
      }
      if (struct.isSetHuoPan()) {
        optionals.set(17);
      }
      if (struct.isSetCunhuo_type()) {
        optionals.set(18);
      }
      if (struct.isSetPriceSegment()) {
        optionals.set(19);
      }
      if (struct.isSetProductionType()) {
        optionals.set(20);
      }
      if (struct.isSetReleventMetting()) {
        optionals.set(21);
      }
      if (struct.isSetMettingTime()) {
        optionals.set(22);
      }
      if (struct.isSetProductionArea()) {
        optionals.set(23);
      }
      if (struct.isSetEntryPerson()) {
        optionals.set(24);
      }
      if (struct.isSetEntryTime()) {
        optionals.set(25);
      }
      if (struct.isSetUpdatePerson()) {
        optionals.set(26);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(27);
      }
      if (struct.isSetEffectPerson()) {
        optionals.set(28);
      }
      if (struct.isSetEffectTime()) {
        optionals.set(29);
      }
      if (struct.isSetFailurePerson()) {
        optionals.set(30);
      }
      if (struct.isSetFailureTime()) {
        optionals.set(31);
      }
      if (struct.isSetImageUrl1()) {
        optionals.set(32);
      }
      if (struct.isSetImageUrl2()) {
        optionals.set(33);
      }
      if (struct.isSetImageUrl3()) {
        optionals.set(34);
      }
      if (struct.isSetBrandList()) {
        optionals.set(35);
      }
      if (struct.isSetCategoryList()) {
        optionals.set(36);
      }
      if (struct.isSetSizeList()) {
        optionals.set(37);
      }
      if (struct.isSetColorList()) {
        optionals.set(38);
      }
      oprot.writeBitSet(optionals, 39);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProxyPrice()) {
        oprot.writeString(struct.proxyPrice);
      }
      if (struct.isSetFPrice()) {
        oprot.writeString(struct.fPrice);
      }
      if (struct.isSetSPrice()) {
        oprot.writeString(struct.sPrice);
      }
      if (struct.isSetTPrice()) {
        oprot.writeString(struct.tPrice);
      }
      if (struct.isSetF1Price()) {
        oprot.writeString(struct.f1Price);
      }
      if (struct.isSetF2Price()) {
        oprot.writeString(struct.f2Price);
      }
      if (struct.isSetF3Price()) {
        oprot.writeString(struct.f3Price);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetTimeCategory()) {
        oprot.writeString(struct.timeCategory);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetIsPanDian()) {
        oprot.writeString(struct.isPanDian);
      }
      if (struct.isSetKuanXing()) {
        oprot.writeString(struct.kuanXing);
      }
      if (struct.isSetBanXing()) {
        oprot.writeString(struct.banXing);
      }
      if (struct.isSetUpDown()) {
        oprot.writeString(struct.upDown);
      }
      if (struct.isSetHuoPan()) {
        oprot.writeString(struct.huoPan);
      }
      if (struct.isSetCunhuo_type()) {
        oprot.writeString(struct.cunhuo_type);
      }
      if (struct.isSetPriceSegment()) {
        oprot.writeString(struct.priceSegment);
      }
      if (struct.isSetProductionType()) {
        oprot.writeString(struct.productionType);
      }
      if (struct.isSetReleventMetting()) {
        oprot.writeString(struct.releventMetting);
      }
      if (struct.isSetMettingTime()) {
        oprot.writeString(struct.mettingTime);
      }
      if (struct.isSetProductionArea()) {
        oprot.writeString(struct.productionArea);
      }
      if (struct.isSetEntryPerson()) {
        oprot.writeString(struct.entryPerson);
      }
      if (struct.isSetEntryTime()) {
        oprot.writeString(struct.entryTime);
      }
      if (struct.isSetUpdatePerson()) {
        oprot.writeString(struct.updatePerson);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetEffectPerson()) {
        oprot.writeString(struct.effectPerson);
      }
      if (struct.isSetEffectTime()) {
        oprot.writeString(struct.effectTime);
      }
      if (struct.isSetFailurePerson()) {
        oprot.writeString(struct.failurePerson);
      }
      if (struct.isSetFailureTime()) {
        oprot.writeString(struct.failureTime);
      }
      if (struct.isSetImageUrl1()) {
        oprot.writeString(struct.imageUrl1);
      }
      if (struct.isSetImageUrl2()) {
        oprot.writeString(struct.imageUrl2);
      }
      if (struct.isSetImageUrl3()) {
        oprot.writeString(struct.imageUrl3);
      }
      if (struct.isSetBrandList()) {
        oprot.writeString(struct.brandList);
      }
      if (struct.isSetCategoryList()) {
        oprot.writeString(struct.categoryList);
      }
      if (struct.isSetSizeList()) {
        oprot.writeString(struct.sizeList);
      }
      if (struct.isSetColorList()) {
        oprot.writeString(struct.colorList);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HPModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.hp_num = iprot.readString();
      struct.setHp_numIsSet(true);
      struct.hpName = iprot.readString();
      struct.setHpNameIsSet(true);
      struct.brand = iprot.readString();
      struct.setBrandIsSet(true);
      struct.category = iprot.readString();
      struct.setCategoryIsSet(true);
      struct.size = iprot.readString();
      struct.setSizeIsSet(true);
      struct.color = iprot.readString();
      struct.setColorIsSet(true);
      struct.price = iprot.readString();
      struct.setPriceIsSet(true);
      BitSet incoming = iprot.readBitSet(39);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.proxyPrice = iprot.readString();
        struct.setProxyPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fPrice = iprot.readString();
        struct.setFPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sPrice = iprot.readString();
        struct.setSPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tPrice = iprot.readString();
        struct.setTPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.f1Price = iprot.readString();
        struct.setF1PriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.f2Price = iprot.readString();
        struct.setF2PriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.f3Price = iprot.readString();
        struct.setF3PriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.timeCategory = iprot.readString();
        struct.setTimeCategoryIsSet(true);
      }
      if (incoming.get(11)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(12)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isPanDian = iprot.readString();
        struct.setIsPanDianIsSet(true);
      }
      if (incoming.get(14)) {
        struct.kuanXing = iprot.readString();
        struct.setKuanXingIsSet(true);
      }
      if (incoming.get(15)) {
        struct.banXing = iprot.readString();
        struct.setBanXingIsSet(true);
      }
      if (incoming.get(16)) {
        struct.upDown = iprot.readString();
        struct.setUpDownIsSet(true);
      }
      if (incoming.get(17)) {
        struct.huoPan = iprot.readString();
        struct.setHuoPanIsSet(true);
      }
      if (incoming.get(18)) {
        struct.cunhuo_type = iprot.readString();
        struct.setCunhuo_typeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.priceSegment = iprot.readString();
        struct.setPriceSegmentIsSet(true);
      }
      if (incoming.get(20)) {
        struct.productionType = iprot.readString();
        struct.setProductionTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.releventMetting = iprot.readString();
        struct.setReleventMettingIsSet(true);
      }
      if (incoming.get(22)) {
        struct.mettingTime = iprot.readString();
        struct.setMettingTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.productionArea = iprot.readString();
        struct.setProductionAreaIsSet(true);
      }
      if (incoming.get(24)) {
        struct.entryPerson = iprot.readString();
        struct.setEntryPersonIsSet(true);
      }
      if (incoming.get(25)) {
        struct.entryTime = iprot.readString();
        struct.setEntryTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.updatePerson = iprot.readString();
        struct.setUpdatePersonIsSet(true);
      }
      if (incoming.get(27)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.effectPerson = iprot.readString();
        struct.setEffectPersonIsSet(true);
      }
      if (incoming.get(29)) {
        struct.effectTime = iprot.readString();
        struct.setEffectTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.failurePerson = iprot.readString();
        struct.setFailurePersonIsSet(true);
      }
      if (incoming.get(31)) {
        struct.failureTime = iprot.readString();
        struct.setFailureTimeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.imageUrl1 = iprot.readString();
        struct.setImageUrl1IsSet(true);
      }
      if (incoming.get(33)) {
        struct.imageUrl2 = iprot.readString();
        struct.setImageUrl2IsSet(true);
      }
      if (incoming.get(34)) {
        struct.imageUrl3 = iprot.readString();
        struct.setImageUrl3IsSet(true);
      }
      if (incoming.get(35)) {
        struct.brandList = iprot.readString();
        struct.setBrandListIsSet(true);
      }
      if (incoming.get(36)) {
        struct.categoryList = iprot.readString();
        struct.setCategoryListIsSet(true);
      }
      if (incoming.get(37)) {
        struct.sizeList = iprot.readString();
        struct.setSizeListIsSet(true);
      }
      if (incoming.get(38)) {
        struct.colorList = iprot.readString();
        struct.setColorListIsSet(true);
      }
    }
  }

}

